// Code generated by MockGen. DO NOT EDIT.
// Source: ../vendor/github.com/aws/aws-sdk-go/service/codebuild/codebuildiface/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	codebuild "github.com/aws/aws-sdk-go/service/codebuild"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCodeBuildAPI is a mock of CodeBuildAPI interface
type MockCodeBuildAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCodeBuildAPIMockRecorder
}

// MockCodeBuildAPIMockRecorder is the mock recorder for MockCodeBuildAPI
type MockCodeBuildAPIMockRecorder struct {
	mock *MockCodeBuildAPI
}

// NewMockCodeBuildAPI creates a new mock instance
func NewMockCodeBuildAPI(ctrl *gomock.Controller) *MockCodeBuildAPI {
	mock := &MockCodeBuildAPI{ctrl: ctrl}
	mock.recorder = &MockCodeBuildAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeBuildAPI) EXPECT() *MockCodeBuildAPIMockRecorder {
	return m.recorder
}

// BatchDeleteBuilds mocks base method
func (m *MockCodeBuildAPI) BatchDeleteBuilds(arg0 *codebuild.BatchDeleteBuildsInput) (*codebuild.BatchDeleteBuildsOutput, error) {
	ret := m.ctrl.Call(m, "BatchDeleteBuilds", arg0)
	ret0, _ := ret[0].(*codebuild.BatchDeleteBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteBuilds indicates an expected call of BatchDeleteBuilds
func (mr *MockCodeBuildAPIMockRecorder) BatchDeleteBuilds(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteBuilds", reflect.TypeOf((*MockCodeBuildAPI)(nil).BatchDeleteBuilds), arg0)
}

// BatchDeleteBuildsWithContext mocks base method
func (m *MockCodeBuildAPI) BatchDeleteBuildsWithContext(arg0 aws.Context, arg1 *codebuild.BatchDeleteBuildsInput, arg2 ...request.Option) (*codebuild.BatchDeleteBuildsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteBuildsWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.BatchDeleteBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteBuildsWithContext indicates an expected call of BatchDeleteBuildsWithContext
func (mr *MockCodeBuildAPIMockRecorder) BatchDeleteBuildsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteBuildsWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).BatchDeleteBuildsWithContext), varargs...)
}

// BatchDeleteBuildsRequest mocks base method
func (m *MockCodeBuildAPI) BatchDeleteBuildsRequest(arg0 *codebuild.BatchDeleteBuildsInput) (*request.Request, *codebuild.BatchDeleteBuildsOutput) {
	ret := m.ctrl.Call(m, "BatchDeleteBuildsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.BatchDeleteBuildsOutput)
	return ret0, ret1
}

// BatchDeleteBuildsRequest indicates an expected call of BatchDeleteBuildsRequest
func (mr *MockCodeBuildAPIMockRecorder) BatchDeleteBuildsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteBuildsRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).BatchDeleteBuildsRequest), arg0)
}

// BatchGetBuilds mocks base method
func (m *MockCodeBuildAPI) BatchGetBuilds(arg0 *codebuild.BatchGetBuildsInput) (*codebuild.BatchGetBuildsOutput, error) {
	ret := m.ctrl.Call(m, "BatchGetBuilds", arg0)
	ret0, _ := ret[0].(*codebuild.BatchGetBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetBuilds indicates an expected call of BatchGetBuilds
func (mr *MockCodeBuildAPIMockRecorder) BatchGetBuilds(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetBuilds", reflect.TypeOf((*MockCodeBuildAPI)(nil).BatchGetBuilds), arg0)
}

// BatchGetBuildsWithContext mocks base method
func (m *MockCodeBuildAPI) BatchGetBuildsWithContext(arg0 aws.Context, arg1 *codebuild.BatchGetBuildsInput, arg2 ...request.Option) (*codebuild.BatchGetBuildsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetBuildsWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.BatchGetBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetBuildsWithContext indicates an expected call of BatchGetBuildsWithContext
func (mr *MockCodeBuildAPIMockRecorder) BatchGetBuildsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetBuildsWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).BatchGetBuildsWithContext), varargs...)
}

// BatchGetBuildsRequest mocks base method
func (m *MockCodeBuildAPI) BatchGetBuildsRequest(arg0 *codebuild.BatchGetBuildsInput) (*request.Request, *codebuild.BatchGetBuildsOutput) {
	ret := m.ctrl.Call(m, "BatchGetBuildsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.BatchGetBuildsOutput)
	return ret0, ret1
}

// BatchGetBuildsRequest indicates an expected call of BatchGetBuildsRequest
func (mr *MockCodeBuildAPIMockRecorder) BatchGetBuildsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetBuildsRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).BatchGetBuildsRequest), arg0)
}

// BatchGetProjects mocks base method
func (m *MockCodeBuildAPI) BatchGetProjects(arg0 *codebuild.BatchGetProjectsInput) (*codebuild.BatchGetProjectsOutput, error) {
	ret := m.ctrl.Call(m, "BatchGetProjects", arg0)
	ret0, _ := ret[0].(*codebuild.BatchGetProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetProjects indicates an expected call of BatchGetProjects
func (mr *MockCodeBuildAPIMockRecorder) BatchGetProjects(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetProjects", reflect.TypeOf((*MockCodeBuildAPI)(nil).BatchGetProjects), arg0)
}

// BatchGetProjectsWithContext mocks base method
func (m *MockCodeBuildAPI) BatchGetProjectsWithContext(arg0 aws.Context, arg1 *codebuild.BatchGetProjectsInput, arg2 ...request.Option) (*codebuild.BatchGetProjectsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetProjectsWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.BatchGetProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetProjectsWithContext indicates an expected call of BatchGetProjectsWithContext
func (mr *MockCodeBuildAPIMockRecorder) BatchGetProjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetProjectsWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).BatchGetProjectsWithContext), varargs...)
}

// BatchGetProjectsRequest mocks base method
func (m *MockCodeBuildAPI) BatchGetProjectsRequest(arg0 *codebuild.BatchGetProjectsInput) (*request.Request, *codebuild.BatchGetProjectsOutput) {
	ret := m.ctrl.Call(m, "BatchGetProjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.BatchGetProjectsOutput)
	return ret0, ret1
}

// BatchGetProjectsRequest indicates an expected call of BatchGetProjectsRequest
func (mr *MockCodeBuildAPIMockRecorder) BatchGetProjectsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetProjectsRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).BatchGetProjectsRequest), arg0)
}

// CreateProject mocks base method
func (m *MockCodeBuildAPI) CreateProject(arg0 *codebuild.CreateProjectInput) (*codebuild.CreateProjectOutput, error) {
	ret := m.ctrl.Call(m, "CreateProject", arg0)
	ret0, _ := ret[0].(*codebuild.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockCodeBuildAPIMockRecorder) CreateProject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockCodeBuildAPI)(nil).CreateProject), arg0)
}

// CreateProjectWithContext mocks base method
func (m *MockCodeBuildAPI) CreateProjectWithContext(arg0 aws.Context, arg1 *codebuild.CreateProjectInput, arg2 ...request.Option) (*codebuild.CreateProjectOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectWithContext indicates an expected call of CreateProjectWithContext
func (mr *MockCodeBuildAPIMockRecorder) CreateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).CreateProjectWithContext), varargs...)
}

// CreateProjectRequest mocks base method
func (m *MockCodeBuildAPI) CreateProjectRequest(arg0 *codebuild.CreateProjectInput) (*request.Request, *codebuild.CreateProjectOutput) {
	ret := m.ctrl.Call(m, "CreateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.CreateProjectOutput)
	return ret0, ret1
}

// CreateProjectRequest indicates an expected call of CreateProjectRequest
func (mr *MockCodeBuildAPIMockRecorder) CreateProjectRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).CreateProjectRequest), arg0)
}

// CreateWebhook mocks base method
func (m *MockCodeBuildAPI) CreateWebhook(arg0 *codebuild.CreateWebhookInput) (*codebuild.CreateWebhookOutput, error) {
	ret := m.ctrl.Call(m, "CreateWebhook", arg0)
	ret0, _ := ret[0].(*codebuild.CreateWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhook indicates an expected call of CreateWebhook
func (mr *MockCodeBuildAPIMockRecorder) CreateWebhook(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockCodeBuildAPI)(nil).CreateWebhook), arg0)
}

// CreateWebhookWithContext mocks base method
func (m *MockCodeBuildAPI) CreateWebhookWithContext(arg0 aws.Context, arg1 *codebuild.CreateWebhookInput, arg2 ...request.Option) (*codebuild.CreateWebhookOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWebhookWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.CreateWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhookWithContext indicates an expected call of CreateWebhookWithContext
func (mr *MockCodeBuildAPIMockRecorder) CreateWebhookWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhookWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).CreateWebhookWithContext), varargs...)
}

// CreateWebhookRequest mocks base method
func (m *MockCodeBuildAPI) CreateWebhookRequest(arg0 *codebuild.CreateWebhookInput) (*request.Request, *codebuild.CreateWebhookOutput) {
	ret := m.ctrl.Call(m, "CreateWebhookRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.CreateWebhookOutput)
	return ret0, ret1
}

// CreateWebhookRequest indicates an expected call of CreateWebhookRequest
func (mr *MockCodeBuildAPIMockRecorder) CreateWebhookRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhookRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).CreateWebhookRequest), arg0)
}

// DeleteProject mocks base method
func (m *MockCodeBuildAPI) DeleteProject(arg0 *codebuild.DeleteProjectInput) (*codebuild.DeleteProjectOutput, error) {
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(*codebuild.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockCodeBuildAPIMockRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockCodeBuildAPI)(nil).DeleteProject), arg0)
}

// DeleteProjectWithContext mocks base method
func (m *MockCodeBuildAPI) DeleteProjectWithContext(arg0 aws.Context, arg1 *codebuild.DeleteProjectInput, arg2 ...request.Option) (*codebuild.DeleteProjectOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectWithContext indicates an expected call of DeleteProjectWithContext
func (mr *MockCodeBuildAPIMockRecorder) DeleteProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).DeleteProjectWithContext), varargs...)
}

// DeleteProjectRequest mocks base method
func (m *MockCodeBuildAPI) DeleteProjectRequest(arg0 *codebuild.DeleteProjectInput) (*request.Request, *codebuild.DeleteProjectOutput) {
	ret := m.ctrl.Call(m, "DeleteProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.DeleteProjectOutput)
	return ret0, ret1
}

// DeleteProjectRequest indicates an expected call of DeleteProjectRequest
func (mr *MockCodeBuildAPIMockRecorder) DeleteProjectRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).DeleteProjectRequest), arg0)
}

// DeleteWebhook mocks base method
func (m *MockCodeBuildAPI) DeleteWebhook(arg0 *codebuild.DeleteWebhookInput) (*codebuild.DeleteWebhookOutput, error) {
	ret := m.ctrl.Call(m, "DeleteWebhook", arg0)
	ret0, _ := ret[0].(*codebuild.DeleteWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebhook indicates an expected call of DeleteWebhook
func (mr *MockCodeBuildAPIMockRecorder) DeleteWebhook(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockCodeBuildAPI)(nil).DeleteWebhook), arg0)
}

// DeleteWebhookWithContext mocks base method
func (m *MockCodeBuildAPI) DeleteWebhookWithContext(arg0 aws.Context, arg1 *codebuild.DeleteWebhookInput, arg2 ...request.Option) (*codebuild.DeleteWebhookOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWebhookWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.DeleteWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebhookWithContext indicates an expected call of DeleteWebhookWithContext
func (mr *MockCodeBuildAPIMockRecorder) DeleteWebhookWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhookWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).DeleteWebhookWithContext), varargs...)
}

// DeleteWebhookRequest mocks base method
func (m *MockCodeBuildAPI) DeleteWebhookRequest(arg0 *codebuild.DeleteWebhookInput) (*request.Request, *codebuild.DeleteWebhookOutput) {
	ret := m.ctrl.Call(m, "DeleteWebhookRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.DeleteWebhookOutput)
	return ret0, ret1
}

// DeleteWebhookRequest indicates an expected call of DeleteWebhookRequest
func (mr *MockCodeBuildAPIMockRecorder) DeleteWebhookRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhookRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).DeleteWebhookRequest), arg0)
}

// InvalidateProjectCache mocks base method
func (m *MockCodeBuildAPI) InvalidateProjectCache(arg0 *codebuild.InvalidateProjectCacheInput) (*codebuild.InvalidateProjectCacheOutput, error) {
	ret := m.ctrl.Call(m, "InvalidateProjectCache", arg0)
	ret0, _ := ret[0].(*codebuild.InvalidateProjectCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateProjectCache indicates an expected call of InvalidateProjectCache
func (mr *MockCodeBuildAPIMockRecorder) InvalidateProjectCache(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateProjectCache", reflect.TypeOf((*MockCodeBuildAPI)(nil).InvalidateProjectCache), arg0)
}

// InvalidateProjectCacheWithContext mocks base method
func (m *MockCodeBuildAPI) InvalidateProjectCacheWithContext(arg0 aws.Context, arg1 *codebuild.InvalidateProjectCacheInput, arg2 ...request.Option) (*codebuild.InvalidateProjectCacheOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InvalidateProjectCacheWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.InvalidateProjectCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateProjectCacheWithContext indicates an expected call of InvalidateProjectCacheWithContext
func (mr *MockCodeBuildAPIMockRecorder) InvalidateProjectCacheWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateProjectCacheWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).InvalidateProjectCacheWithContext), varargs...)
}

// InvalidateProjectCacheRequest mocks base method
func (m *MockCodeBuildAPI) InvalidateProjectCacheRequest(arg0 *codebuild.InvalidateProjectCacheInput) (*request.Request, *codebuild.InvalidateProjectCacheOutput) {
	ret := m.ctrl.Call(m, "InvalidateProjectCacheRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.InvalidateProjectCacheOutput)
	return ret0, ret1
}

// InvalidateProjectCacheRequest indicates an expected call of InvalidateProjectCacheRequest
func (mr *MockCodeBuildAPIMockRecorder) InvalidateProjectCacheRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateProjectCacheRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).InvalidateProjectCacheRequest), arg0)
}

// ListBuilds mocks base method
func (m *MockCodeBuildAPI) ListBuilds(arg0 *codebuild.ListBuildsInput) (*codebuild.ListBuildsOutput, error) {
	ret := m.ctrl.Call(m, "ListBuilds", arg0)
	ret0, _ := ret[0].(*codebuild.ListBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuilds indicates an expected call of ListBuilds
func (mr *MockCodeBuildAPIMockRecorder) ListBuilds(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuilds", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListBuilds), arg0)
}

// ListBuildsWithContext mocks base method
func (m *MockCodeBuildAPI) ListBuildsWithContext(arg0 aws.Context, arg1 *codebuild.ListBuildsInput, arg2 ...request.Option) (*codebuild.ListBuildsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuildsWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.ListBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuildsWithContext indicates an expected call of ListBuildsWithContext
func (mr *MockCodeBuildAPIMockRecorder) ListBuildsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildsWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListBuildsWithContext), varargs...)
}

// ListBuildsRequest mocks base method
func (m *MockCodeBuildAPI) ListBuildsRequest(arg0 *codebuild.ListBuildsInput) (*request.Request, *codebuild.ListBuildsOutput) {
	ret := m.ctrl.Call(m, "ListBuildsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.ListBuildsOutput)
	return ret0, ret1
}

// ListBuildsRequest indicates an expected call of ListBuildsRequest
func (mr *MockCodeBuildAPIMockRecorder) ListBuildsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildsRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListBuildsRequest), arg0)
}

// ListBuildsForProject mocks base method
func (m *MockCodeBuildAPI) ListBuildsForProject(arg0 *codebuild.ListBuildsForProjectInput) (*codebuild.ListBuildsForProjectOutput, error) {
	ret := m.ctrl.Call(m, "ListBuildsForProject", arg0)
	ret0, _ := ret[0].(*codebuild.ListBuildsForProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuildsForProject indicates an expected call of ListBuildsForProject
func (mr *MockCodeBuildAPIMockRecorder) ListBuildsForProject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildsForProject", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListBuildsForProject), arg0)
}

// ListBuildsForProjectWithContext mocks base method
func (m *MockCodeBuildAPI) ListBuildsForProjectWithContext(arg0 aws.Context, arg1 *codebuild.ListBuildsForProjectInput, arg2 ...request.Option) (*codebuild.ListBuildsForProjectOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuildsForProjectWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.ListBuildsForProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuildsForProjectWithContext indicates an expected call of ListBuildsForProjectWithContext
func (mr *MockCodeBuildAPIMockRecorder) ListBuildsForProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildsForProjectWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListBuildsForProjectWithContext), varargs...)
}

// ListBuildsForProjectRequest mocks base method
func (m *MockCodeBuildAPI) ListBuildsForProjectRequest(arg0 *codebuild.ListBuildsForProjectInput) (*request.Request, *codebuild.ListBuildsForProjectOutput) {
	ret := m.ctrl.Call(m, "ListBuildsForProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.ListBuildsForProjectOutput)
	return ret0, ret1
}

// ListBuildsForProjectRequest indicates an expected call of ListBuildsForProjectRequest
func (mr *MockCodeBuildAPIMockRecorder) ListBuildsForProjectRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildsForProjectRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListBuildsForProjectRequest), arg0)
}

// ListCuratedEnvironmentImages mocks base method
func (m *MockCodeBuildAPI) ListCuratedEnvironmentImages(arg0 *codebuild.ListCuratedEnvironmentImagesInput) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	ret := m.ctrl.Call(m, "ListCuratedEnvironmentImages", arg0)
	ret0, _ := ret[0].(*codebuild.ListCuratedEnvironmentImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCuratedEnvironmentImages indicates an expected call of ListCuratedEnvironmentImages
func (mr *MockCodeBuildAPIMockRecorder) ListCuratedEnvironmentImages(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCuratedEnvironmentImages", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListCuratedEnvironmentImages), arg0)
}

// ListCuratedEnvironmentImagesWithContext mocks base method
func (m *MockCodeBuildAPI) ListCuratedEnvironmentImagesWithContext(arg0 aws.Context, arg1 *codebuild.ListCuratedEnvironmentImagesInput, arg2 ...request.Option) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCuratedEnvironmentImagesWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.ListCuratedEnvironmentImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCuratedEnvironmentImagesWithContext indicates an expected call of ListCuratedEnvironmentImagesWithContext
func (mr *MockCodeBuildAPIMockRecorder) ListCuratedEnvironmentImagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCuratedEnvironmentImagesWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListCuratedEnvironmentImagesWithContext), varargs...)
}

// ListCuratedEnvironmentImagesRequest mocks base method
func (m *MockCodeBuildAPI) ListCuratedEnvironmentImagesRequest(arg0 *codebuild.ListCuratedEnvironmentImagesInput) (*request.Request, *codebuild.ListCuratedEnvironmentImagesOutput) {
	ret := m.ctrl.Call(m, "ListCuratedEnvironmentImagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.ListCuratedEnvironmentImagesOutput)
	return ret0, ret1
}

// ListCuratedEnvironmentImagesRequest indicates an expected call of ListCuratedEnvironmentImagesRequest
func (mr *MockCodeBuildAPIMockRecorder) ListCuratedEnvironmentImagesRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCuratedEnvironmentImagesRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListCuratedEnvironmentImagesRequest), arg0)
}

// ListProjects mocks base method
func (m *MockCodeBuildAPI) ListProjects(arg0 *codebuild.ListProjectsInput) (*codebuild.ListProjectsOutput, error) {
	ret := m.ctrl.Call(m, "ListProjects", arg0)
	ret0, _ := ret[0].(*codebuild.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockCodeBuildAPIMockRecorder) ListProjects(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListProjects), arg0)
}

// ListProjectsWithContext mocks base method
func (m *MockCodeBuildAPI) ListProjectsWithContext(arg0 aws.Context, arg1 *codebuild.ListProjectsInput, arg2 ...request.Option) (*codebuild.ListProjectsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectsWithContext indicates an expected call of ListProjectsWithContext
func (mr *MockCodeBuildAPIMockRecorder) ListProjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListProjectsWithContext), varargs...)
}

// ListProjectsRequest mocks base method
func (m *MockCodeBuildAPI) ListProjectsRequest(arg0 *codebuild.ListProjectsInput) (*request.Request, *codebuild.ListProjectsOutput) {
	ret := m.ctrl.Call(m, "ListProjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.ListProjectsOutput)
	return ret0, ret1
}

// ListProjectsRequest indicates an expected call of ListProjectsRequest
func (mr *MockCodeBuildAPIMockRecorder) ListProjectsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).ListProjectsRequest), arg0)
}

// StartBuild mocks base method
func (m *MockCodeBuildAPI) StartBuild(arg0 *codebuild.StartBuildInput) (*codebuild.StartBuildOutput, error) {
	ret := m.ctrl.Call(m, "StartBuild", arg0)
	ret0, _ := ret[0].(*codebuild.StartBuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuild indicates an expected call of StartBuild
func (mr *MockCodeBuildAPIMockRecorder) StartBuild(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuild", reflect.TypeOf((*MockCodeBuildAPI)(nil).StartBuild), arg0)
}

// StartBuildWithContext mocks base method
func (m *MockCodeBuildAPI) StartBuildWithContext(arg0 aws.Context, arg1 *codebuild.StartBuildInput, arg2 ...request.Option) (*codebuild.StartBuildOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBuildWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.StartBuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuildWithContext indicates an expected call of StartBuildWithContext
func (mr *MockCodeBuildAPIMockRecorder) StartBuildWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuildWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).StartBuildWithContext), varargs...)
}

// StartBuildRequest mocks base method
func (m *MockCodeBuildAPI) StartBuildRequest(arg0 *codebuild.StartBuildInput) (*request.Request, *codebuild.StartBuildOutput) {
	ret := m.ctrl.Call(m, "StartBuildRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.StartBuildOutput)
	return ret0, ret1
}

// StartBuildRequest indicates an expected call of StartBuildRequest
func (mr *MockCodeBuildAPIMockRecorder) StartBuildRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuildRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).StartBuildRequest), arg0)
}

// StopBuild mocks base method
func (m *MockCodeBuildAPI) StopBuild(arg0 *codebuild.StopBuildInput) (*codebuild.StopBuildOutput, error) {
	ret := m.ctrl.Call(m, "StopBuild", arg0)
	ret0, _ := ret[0].(*codebuild.StopBuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopBuild indicates an expected call of StopBuild
func (mr *MockCodeBuildAPIMockRecorder) StopBuild(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBuild", reflect.TypeOf((*MockCodeBuildAPI)(nil).StopBuild), arg0)
}

// StopBuildWithContext mocks base method
func (m *MockCodeBuildAPI) StopBuildWithContext(arg0 aws.Context, arg1 *codebuild.StopBuildInput, arg2 ...request.Option) (*codebuild.StopBuildOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopBuildWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.StopBuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopBuildWithContext indicates an expected call of StopBuildWithContext
func (mr *MockCodeBuildAPIMockRecorder) StopBuildWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBuildWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).StopBuildWithContext), varargs...)
}

// StopBuildRequest mocks base method
func (m *MockCodeBuildAPI) StopBuildRequest(arg0 *codebuild.StopBuildInput) (*request.Request, *codebuild.StopBuildOutput) {
	ret := m.ctrl.Call(m, "StopBuildRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.StopBuildOutput)
	return ret0, ret1
}

// StopBuildRequest indicates an expected call of StopBuildRequest
func (mr *MockCodeBuildAPIMockRecorder) StopBuildRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBuildRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).StopBuildRequest), arg0)
}

// UpdateProject mocks base method
func (m *MockCodeBuildAPI) UpdateProject(arg0 *codebuild.UpdateProjectInput) (*codebuild.UpdateProjectOutput, error) {
	ret := m.ctrl.Call(m, "UpdateProject", arg0)
	ret0, _ := ret[0].(*codebuild.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockCodeBuildAPIMockRecorder) UpdateProject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockCodeBuildAPI)(nil).UpdateProject), arg0)
}

// UpdateProjectWithContext mocks base method
func (m *MockCodeBuildAPI) UpdateProjectWithContext(arg0 aws.Context, arg1 *codebuild.UpdateProjectInput, arg2 ...request.Option) (*codebuild.UpdateProjectOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*codebuild.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectWithContext indicates an expected call of UpdateProjectWithContext
func (mr *MockCodeBuildAPIMockRecorder) UpdateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectWithContext", reflect.TypeOf((*MockCodeBuildAPI)(nil).UpdateProjectWithContext), varargs...)
}

// UpdateProjectRequest mocks base method
func (m *MockCodeBuildAPI) UpdateProjectRequest(arg0 *codebuild.UpdateProjectInput) (*request.Request, *codebuild.UpdateProjectOutput) {
	ret := m.ctrl.Call(m, "UpdateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.UpdateProjectOutput)
	return ret0, ret1
}

// UpdateProjectRequest indicates an expected call of UpdateProjectRequest
func (mr *MockCodeBuildAPIMockRecorder) UpdateProjectRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectRequest", reflect.TypeOf((*MockCodeBuildAPI)(nil).UpdateProjectRequest), arg0)
}
