// Automatically generated by MockGen. DO NOT EDIT!
// Source: vendor/github.com/aws/aws-sdk-go/service/codebuild/codebuildiface/interface.go

package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	codebuild "github.com/aws/aws-sdk-go/service/codebuild"
	gomock "github.com/golang/mock/gomock"
)

// Mock of CodeBuildAPI interface
type MockCodeBuildAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockCodeBuildAPIRecorder
}

// Recorder for MockCodeBuildAPI (not exported)
type _MockCodeBuildAPIRecorder struct {
	mock *MockCodeBuildAPI
}

func NewMockCodeBuildAPI(ctrl *gomock.Controller) *MockCodeBuildAPI {
	mock := &MockCodeBuildAPI{ctrl: ctrl}
	mock.recorder = &_MockCodeBuildAPIRecorder{mock}
	return mock
}

func (_m *MockCodeBuildAPI) EXPECT() *_MockCodeBuildAPIRecorder {
	return _m.recorder
}

func (_m *MockCodeBuildAPI) BatchDeleteBuilds(_param0 *codebuild.BatchDeleteBuildsInput) (*codebuild.BatchDeleteBuildsOutput, error) {
	ret := _m.ctrl.Call(_m, "BatchDeleteBuilds", _param0)
	ret0, _ := ret[0].(*codebuild.BatchDeleteBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) BatchDeleteBuilds(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchDeleteBuilds", arg0)
}

func (_m *MockCodeBuildAPI) BatchDeleteBuildsWithContext(_param0 aws.Context, _param1 *codebuild.BatchDeleteBuildsInput, _param2 ...request.Option) (*codebuild.BatchDeleteBuildsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BatchDeleteBuildsWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.BatchDeleteBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) BatchDeleteBuildsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchDeleteBuildsWithContext", _s...)
}

func (_m *MockCodeBuildAPI) BatchDeleteBuildsRequest(_param0 *codebuild.BatchDeleteBuildsInput) (*request.Request, *codebuild.BatchDeleteBuildsOutput) {
	ret := _m.ctrl.Call(_m, "BatchDeleteBuildsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.BatchDeleteBuildsOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) BatchDeleteBuildsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchDeleteBuildsRequest", arg0)
}

func (_m *MockCodeBuildAPI) BatchGetBuilds(_param0 *codebuild.BatchGetBuildsInput) (*codebuild.BatchGetBuildsOutput, error) {
	ret := _m.ctrl.Call(_m, "BatchGetBuilds", _param0)
	ret0, _ := ret[0].(*codebuild.BatchGetBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) BatchGetBuilds(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchGetBuilds", arg0)
}

func (_m *MockCodeBuildAPI) BatchGetBuildsWithContext(_param0 aws.Context, _param1 *codebuild.BatchGetBuildsInput, _param2 ...request.Option) (*codebuild.BatchGetBuildsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BatchGetBuildsWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.BatchGetBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) BatchGetBuildsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchGetBuildsWithContext", _s...)
}

func (_m *MockCodeBuildAPI) BatchGetBuildsRequest(_param0 *codebuild.BatchGetBuildsInput) (*request.Request, *codebuild.BatchGetBuildsOutput) {
	ret := _m.ctrl.Call(_m, "BatchGetBuildsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.BatchGetBuildsOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) BatchGetBuildsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchGetBuildsRequest", arg0)
}

func (_m *MockCodeBuildAPI) BatchGetProjects(_param0 *codebuild.BatchGetProjectsInput) (*codebuild.BatchGetProjectsOutput, error) {
	ret := _m.ctrl.Call(_m, "BatchGetProjects", _param0)
	ret0, _ := ret[0].(*codebuild.BatchGetProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) BatchGetProjects(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchGetProjects", arg0)
}

func (_m *MockCodeBuildAPI) BatchGetProjectsWithContext(_param0 aws.Context, _param1 *codebuild.BatchGetProjectsInput, _param2 ...request.Option) (*codebuild.BatchGetProjectsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BatchGetProjectsWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.BatchGetProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) BatchGetProjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchGetProjectsWithContext", _s...)
}

func (_m *MockCodeBuildAPI) BatchGetProjectsRequest(_param0 *codebuild.BatchGetProjectsInput) (*request.Request, *codebuild.BatchGetProjectsOutput) {
	ret := _m.ctrl.Call(_m, "BatchGetProjectsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.BatchGetProjectsOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) BatchGetProjectsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchGetProjectsRequest", arg0)
}

func (_m *MockCodeBuildAPI) CreateProject(_param0 *codebuild.CreateProjectInput) (*codebuild.CreateProjectOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateProject", _param0)
	ret0, _ := ret[0].(*codebuild.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) CreateProject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateProject", arg0)
}

func (_m *MockCodeBuildAPI) CreateProjectWithContext(_param0 aws.Context, _param1 *codebuild.CreateProjectInput, _param2 ...request.Option) (*codebuild.CreateProjectOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateProjectWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) CreateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateProjectWithContext", _s...)
}

func (_m *MockCodeBuildAPI) CreateProjectRequest(_param0 *codebuild.CreateProjectInput) (*request.Request, *codebuild.CreateProjectOutput) {
	ret := _m.ctrl.Call(_m, "CreateProjectRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.CreateProjectOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) CreateProjectRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateProjectRequest", arg0)
}

func (_m *MockCodeBuildAPI) CreateWebhook(_param0 *codebuild.CreateWebhookInput) (*codebuild.CreateWebhookOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateWebhook", _param0)
	ret0, _ := ret[0].(*codebuild.CreateWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) CreateWebhook(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateWebhook", arg0)
}

func (_m *MockCodeBuildAPI) CreateWebhookWithContext(_param0 aws.Context, _param1 *codebuild.CreateWebhookInput, _param2 ...request.Option) (*codebuild.CreateWebhookOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateWebhookWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.CreateWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) CreateWebhookWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateWebhookWithContext", _s...)
}

func (_m *MockCodeBuildAPI) CreateWebhookRequest(_param0 *codebuild.CreateWebhookInput) (*request.Request, *codebuild.CreateWebhookOutput) {
	ret := _m.ctrl.Call(_m, "CreateWebhookRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.CreateWebhookOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) CreateWebhookRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateWebhookRequest", arg0)
}

func (_m *MockCodeBuildAPI) DeleteProject(_param0 *codebuild.DeleteProjectInput) (*codebuild.DeleteProjectOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteProject", _param0)
	ret0, _ := ret[0].(*codebuild.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteProject", arg0)
}

func (_m *MockCodeBuildAPI) DeleteProjectWithContext(_param0 aws.Context, _param1 *codebuild.DeleteProjectInput, _param2 ...request.Option) (*codebuild.DeleteProjectOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteProjectWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) DeleteProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteProjectWithContext", _s...)
}

func (_m *MockCodeBuildAPI) DeleteProjectRequest(_param0 *codebuild.DeleteProjectInput) (*request.Request, *codebuild.DeleteProjectOutput) {
	ret := _m.ctrl.Call(_m, "DeleteProjectRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.DeleteProjectOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) DeleteProjectRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteProjectRequest", arg0)
}

func (_m *MockCodeBuildAPI) DeleteWebhook(_param0 *codebuild.DeleteWebhookInput) (*codebuild.DeleteWebhookOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteWebhook", _param0)
	ret0, _ := ret[0].(*codebuild.DeleteWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) DeleteWebhook(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteWebhook", arg0)
}

func (_m *MockCodeBuildAPI) DeleteWebhookWithContext(_param0 aws.Context, _param1 *codebuild.DeleteWebhookInput, _param2 ...request.Option) (*codebuild.DeleteWebhookOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteWebhookWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.DeleteWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) DeleteWebhookWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteWebhookWithContext", _s...)
}

func (_m *MockCodeBuildAPI) DeleteWebhookRequest(_param0 *codebuild.DeleteWebhookInput) (*request.Request, *codebuild.DeleteWebhookOutput) {
	ret := _m.ctrl.Call(_m, "DeleteWebhookRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.DeleteWebhookOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) DeleteWebhookRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteWebhookRequest", arg0)
}

func (_m *MockCodeBuildAPI) InvalidateProjectCache(_param0 *codebuild.InvalidateProjectCacheInput) (*codebuild.InvalidateProjectCacheOutput, error) {
	ret := _m.ctrl.Call(_m, "InvalidateProjectCache", _param0)
	ret0, _ := ret[0].(*codebuild.InvalidateProjectCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) InvalidateProjectCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InvalidateProjectCache", arg0)
}

func (_m *MockCodeBuildAPI) InvalidateProjectCacheWithContext(_param0 aws.Context, _param1 *codebuild.InvalidateProjectCacheInput, _param2 ...request.Option) (*codebuild.InvalidateProjectCacheOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InvalidateProjectCacheWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.InvalidateProjectCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) InvalidateProjectCacheWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InvalidateProjectCacheWithContext", _s...)
}

func (_m *MockCodeBuildAPI) InvalidateProjectCacheRequest(_param0 *codebuild.InvalidateProjectCacheInput) (*request.Request, *codebuild.InvalidateProjectCacheOutput) {
	ret := _m.ctrl.Call(_m, "InvalidateProjectCacheRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.InvalidateProjectCacheOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) InvalidateProjectCacheRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InvalidateProjectCacheRequest", arg0)
}

func (_m *MockCodeBuildAPI) ListBuilds(_param0 *codebuild.ListBuildsInput) (*codebuild.ListBuildsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListBuilds", _param0)
	ret0, _ := ret[0].(*codebuild.ListBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListBuilds(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListBuilds", arg0)
}

func (_m *MockCodeBuildAPI) ListBuildsWithContext(_param0 aws.Context, _param1 *codebuild.ListBuildsInput, _param2 ...request.Option) (*codebuild.ListBuildsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListBuildsWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.ListBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListBuildsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListBuildsWithContext", _s...)
}

func (_m *MockCodeBuildAPI) ListBuildsRequest(_param0 *codebuild.ListBuildsInput) (*request.Request, *codebuild.ListBuildsOutput) {
	ret := _m.ctrl.Call(_m, "ListBuildsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.ListBuildsOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListBuildsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListBuildsRequest", arg0)
}

func (_m *MockCodeBuildAPI) ListBuildsForProject(_param0 *codebuild.ListBuildsForProjectInput) (*codebuild.ListBuildsForProjectOutput, error) {
	ret := _m.ctrl.Call(_m, "ListBuildsForProject", _param0)
	ret0, _ := ret[0].(*codebuild.ListBuildsForProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListBuildsForProject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListBuildsForProject", arg0)
}

func (_m *MockCodeBuildAPI) ListBuildsForProjectWithContext(_param0 aws.Context, _param1 *codebuild.ListBuildsForProjectInput, _param2 ...request.Option) (*codebuild.ListBuildsForProjectOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListBuildsForProjectWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.ListBuildsForProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListBuildsForProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListBuildsForProjectWithContext", _s...)
}

func (_m *MockCodeBuildAPI) ListBuildsForProjectRequest(_param0 *codebuild.ListBuildsForProjectInput) (*request.Request, *codebuild.ListBuildsForProjectOutput) {
	ret := _m.ctrl.Call(_m, "ListBuildsForProjectRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.ListBuildsForProjectOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListBuildsForProjectRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListBuildsForProjectRequest", arg0)
}

func (_m *MockCodeBuildAPI) ListCuratedEnvironmentImages(_param0 *codebuild.ListCuratedEnvironmentImagesInput) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListCuratedEnvironmentImages", _param0)
	ret0, _ := ret[0].(*codebuild.ListCuratedEnvironmentImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListCuratedEnvironmentImages(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCuratedEnvironmentImages", arg0)
}

func (_m *MockCodeBuildAPI) ListCuratedEnvironmentImagesWithContext(_param0 aws.Context, _param1 *codebuild.ListCuratedEnvironmentImagesInput, _param2 ...request.Option) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListCuratedEnvironmentImagesWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.ListCuratedEnvironmentImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListCuratedEnvironmentImagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCuratedEnvironmentImagesWithContext", _s...)
}

func (_m *MockCodeBuildAPI) ListCuratedEnvironmentImagesRequest(_param0 *codebuild.ListCuratedEnvironmentImagesInput) (*request.Request, *codebuild.ListCuratedEnvironmentImagesOutput) {
	ret := _m.ctrl.Call(_m, "ListCuratedEnvironmentImagesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.ListCuratedEnvironmentImagesOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListCuratedEnvironmentImagesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCuratedEnvironmentImagesRequest", arg0)
}

func (_m *MockCodeBuildAPI) ListProjects(_param0 *codebuild.ListProjectsInput) (*codebuild.ListProjectsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListProjects", _param0)
	ret0, _ := ret[0].(*codebuild.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListProjects(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListProjects", arg0)
}

func (_m *MockCodeBuildAPI) ListProjectsWithContext(_param0 aws.Context, _param1 *codebuild.ListProjectsInput, _param2 ...request.Option) (*codebuild.ListProjectsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListProjectsWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListProjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListProjectsWithContext", _s...)
}

func (_m *MockCodeBuildAPI) ListProjectsRequest(_param0 *codebuild.ListProjectsInput) (*request.Request, *codebuild.ListProjectsOutput) {
	ret := _m.ctrl.Call(_m, "ListProjectsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.ListProjectsOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) ListProjectsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListProjectsRequest", arg0)
}

func (_m *MockCodeBuildAPI) StartBuild(_param0 *codebuild.StartBuildInput) (*codebuild.StartBuildOutput, error) {
	ret := _m.ctrl.Call(_m, "StartBuild", _param0)
	ret0, _ := ret[0].(*codebuild.StartBuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) StartBuild(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartBuild", arg0)
}

func (_m *MockCodeBuildAPI) StartBuildWithContext(_param0 aws.Context, _param1 *codebuild.StartBuildInput, _param2 ...request.Option) (*codebuild.StartBuildOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "StartBuildWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.StartBuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) StartBuildWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartBuildWithContext", _s...)
}

func (_m *MockCodeBuildAPI) StartBuildRequest(_param0 *codebuild.StartBuildInput) (*request.Request, *codebuild.StartBuildOutput) {
	ret := _m.ctrl.Call(_m, "StartBuildRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.StartBuildOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) StartBuildRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartBuildRequest", arg0)
}

func (_m *MockCodeBuildAPI) StopBuild(_param0 *codebuild.StopBuildInput) (*codebuild.StopBuildOutput, error) {
	ret := _m.ctrl.Call(_m, "StopBuild", _param0)
	ret0, _ := ret[0].(*codebuild.StopBuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) StopBuild(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopBuild", arg0)
}

func (_m *MockCodeBuildAPI) StopBuildWithContext(_param0 aws.Context, _param1 *codebuild.StopBuildInput, _param2 ...request.Option) (*codebuild.StopBuildOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "StopBuildWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.StopBuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) StopBuildWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopBuildWithContext", _s...)
}

func (_m *MockCodeBuildAPI) StopBuildRequest(_param0 *codebuild.StopBuildInput) (*request.Request, *codebuild.StopBuildOutput) {
	ret := _m.ctrl.Call(_m, "StopBuildRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.StopBuildOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) StopBuildRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopBuildRequest", arg0)
}

func (_m *MockCodeBuildAPI) UpdateProject(_param0 *codebuild.UpdateProjectInput) (*codebuild.UpdateProjectOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateProject", _param0)
	ret0, _ := ret[0].(*codebuild.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) UpdateProject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateProject", arg0)
}

func (_m *MockCodeBuildAPI) UpdateProjectWithContext(_param0 aws.Context, _param1 *codebuild.UpdateProjectInput, _param2 ...request.Option) (*codebuild.UpdateProjectOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateProjectWithContext", _s...)
	ret0, _ := ret[0].(*codebuild.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) UpdateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateProjectWithContext", _s...)
}

func (_m *MockCodeBuildAPI) UpdateProjectRequest(_param0 *codebuild.UpdateProjectInput) (*request.Request, *codebuild.UpdateProjectOutput) {
	ret := _m.ctrl.Call(_m, "UpdateProjectRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codebuild.UpdateProjectOutput)
	return ret0, ret1
}

func (_mr *_MockCodeBuildAPIRecorder) UpdateProjectRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateProjectRequest", arg0)
}
