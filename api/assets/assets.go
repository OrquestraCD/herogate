// Code generated by go-bindata.
// sources:
// assets/platform.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsPlatformYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xed\x6f\xe3\x36\xd2\xff\x9e\xbf\x82\xd0\x93\x0f\x6d\xf1\xc8\xb1\x93\x7d\x15\xd0\x07\x50\x6c\x6f\x6a\x3c\x4e\x6c\xd8\x4e\x7a\xed\xe1\x10\xd0\xd2\x58\xe6\x45\x16\x55\x92\x8a\xd7\xdd\xcd\xff\x7e\x20\x29\x59\xaf\xf4\x4b\xb2\x69\xaf\xb8\xd3\x7e\xd9\x90\x33\x9c\xe1\x6f\x86\xc3\x19\x92\x76\x7f\x9e\xce\x60\x15\x87\x58\xc0\x27\xca\x56\x58\xdc\x01\xe3\x84\x46\x0e\xb2\xce\xdb\x9d\xb6\xdd\xfe\x68\xb7\x3f\x5a\x27\x3d\xe0\x1e\x23\xb1\x50\x3d\x3f\x01\xa3\x01\x16\x80\xc6\x21\x16\x0b\xca\x56\x28\x1b\x02\x3d\x76\x5a\xed\x93\x93\x09\x70\x9a\x30\x0f\xb8\x73\x82\xd0\xff\xa0\x1b\x10\x6b\xca\x1e\x4e\xd0\x96\x33\x6d\x91\xdd\x08\xcd\x36\x31\x38\xc8\x72\x7f\x9e\x3a\x4e\xbf\x7b\xee\x38\x77\xe3\xae\xa5\x7a\xc6\x8c\xc6\xc0\x04\xd1\x03\xc9\xaf\x4b\x7c\x76\x19\x52\xef\xc1\x41\x56\xe7\xe3\x79\xab\xf3\xee\x43\xab\xdd\x6a\x9f\x75\xde\x59\x29\xc5\x0c\x07\x5b\x6a\x84\x6c\xf4\xff\xb0\x71\xd0\x0d\x5e\xc1\xb6\x0d\xa1\x3b\x1c\x26\xe0\x14\x1a\x10\x9a\xc0\xc2\x41\x4a\x85\xa9\xc0\xde\x43\xca\x50\xd1\x77\x9a\xcc\x23\x10\xae\x41\x6d\xdd\x6b\xd2\xfc\x2e\xf6\x06\x7e\x2e\x53\xc9\xab\x0c\x9f\x76\xba\x8f\x98\x84\x78\x4e\x42\x22\x36\xbf\xd2\xa8\xa0\xe8\xa7\xc8\x71\xa6\x10\x82\x27\x8a\xca\xdb\xa8\x5d\xfa\x4b\x52\x5d\x81\x70\x7f\xe5\x0e\xb2\xac\x3d\xc0\x9d\xb7\x33\x8a\x6b\x1c\x8f\x93\x79\x48\xbc\x41\x3c\x8a\x86\x38\x89\xbc\xa5\x83\x04\x4b\xe0\x68\x60\x51\x09\x59\xa5\x74\x32\x77\x90\x75\xfa\xa5\x0c\xf0\x13\xd2\x90\x21\xd7\x32\x61\x7d\xf9\x6f\x87\x75\xe7\x79\x58\x77\xde\xbd\x12\xd8\xc7\x62\x7d\xd9\x80\xf5\x84\x26\x02\x66\x78\x1e\x82\x01\xee\x9c\xe0\xe5\x90\xbf\xe6\x02\x1d\x25\x62\x4e\x93\xc8\x57\xfa\xee\x9a\x8b\x69\x1a\xf9\x44\xf7\xcd\x26\xa7\x4c\xc9\x7a\xc0\x05\x89\xb0\x0c\x91\x45\x07\x68\xb7\xd4\xbf\xb3\xad\xe9\xaf\xb0\x80\x35\xde\xec\x1b\x3f\x25\xab\xcf\x31\xed\x30\xcc\x6e\x10\x09\x60\x11\x88\x94\xca\x34\xcf\xd7\x34\x42\x2a\xda\x15\x02\x7b\xcb\x15\x44\xc2\x1c\xe6\x6b\xa4\x2f\x77\xaf\x0a\x00\xcf\x86\x39\x8d\xf5\xbb\x3c\x49\x93\xe4\x8e\xe0\x72\x4e\x3d\xa2\x3c\xc0\x34\x0f\xcd\xb2\x4f\xa9\x54\xf6\xcb\x7c\xb2\x39\x9e\xfe\x89\xf3\xb9\x7c\xc9\x7c\x54\x22\x31\x26\x31\x84\x24\x2a\xce\x2e\x6b\xaa\x4f\xa9\x4b\xfd\xbc\xd7\xc9\xfe\x67\x9a\x88\x74\xe5\x8a\x32\x35\x3f\x97\x9f\xcb\x04\x59\x60\x4f\x4c\x05\x65\x05\x06\x2d\x78\x7a\xb1\x6d\x18\x52\x4f\x01\x57\x5c\x3f\xa5\x29\x66\x0a\x95\x06\xcc\x10\x02\x2e\x30\x13\xfd\xcf\xe0\x25\x72\x90\x51\x74\x1b\xfb\x58\x80\x83\x16\x38\xe4\x5b\x2a\x1a\x82\xcb\xa2\xf2\x96\x25\x37\x23\x51\xd9\xb2\xaa\x22\x25\x63\x89\xc0\x65\x51\x66\x4f\x81\x03\x28\x45\x06\x05\x0c\x9a\x40\x4c\x39\x11\x94\x6d\x0a\x8c\xae\x27\x95\xe3\xe5\x10\x91\x71\x74\x97\x38\x0a\x60\xaa\xf2\xc0\x12\x41\xc6\x27\x21\x2b\x3a\x40\xf6\x75\xb1\x80\x80\xb2\x8d\x83\x1a\x99\x11\x1a\xad\x23\x60\xca\x3c\xb5\xae\x31\xa3\x8f\xc4\x97\xbd\xd2\xfa\x5d\xba\x5a\x11\x51\x23\xda\x66\xb8\x9d\x4a\x57\x97\x46\x0b\x12\x24\xac\x66\x38\xfd\xe5\x18\x94\x9d\x25\xff\x9a\x0d\x50\xc4\x26\x33\x45\x23\x9e\x45\xc2\x4a\x2c\xd6\xdf\x25\xc3\x91\xb7\xd4\xf8\xae\x30\x17\xc0\x2a\x24\xa3\x44\xc4\x89\xc8\x5c\x8a\xd7\xb5\xc8\xac\x93\xe9\x51\x81\x38\xeb\xbe\x4c\x48\xe8\x97\x46\xdf\x69\x6b\x45\xfe\x4c\x23\x37\xf1\x1e\x61\xe3\x66\xf6\xe7\x9a\x78\xcc\xe8\x3f\xc1\x13\x26\xfb\x96\x16\x70\x1d\x23\xa4\xb6\x9f\x17\x19\x20\x9d\xfd\xb1\x66\x2c\xa3\x90\xf5\xf6\x20\x0e\xe9\xe6\x70\x33\x6a\xfa\x67\xda\xb1\x91\xf9\x50\x43\x86\x34\xf1\x75\xf9\x49\x68\xf4\xcd\xac\xb9\x8d\xdd\x46\x5b\x36\x86\xf8\xea\xdc\xaf\xa9\x2f\xe3\xd9\xa4\xef\xce\xfa\xf7\xb7\xe3\x9e\x3b\xeb\x37\xe0\x10\xeb\x2a\x42\x6e\x29\xa8\xeb\x8e\xdd\xcb\xc1\x70\x30\xfb\xe5\xfe\xc6\xbd\xee\xf7\xee\x07\xee\x75\x8d\x25\xab\x99\xc7\x58\x2c\x2b\x96\x74\x9c\x38\xad\xac\x5b\x1b\xbc\x0a\xeb\x91\xa8\x1a\xf9\xf3\xef\xf0\x10\x94\x79\x47\x65\x37\x28\x92\xe6\xfb\x42\xf6\x1d\xeb\xde\x99\x63\xee\xdc\xf5\xea\x7b\xf7\xf4\xc2\x71\x2e\x13\xef\xc1\x5c\xe2\xe9\xde\xb2\x71\xf3\xea\x67\x99\x8a\xb3\xd3\x32\xc8\xf5\x3c\x9a\x44\x62\xe0\x3f\x65\x2d\x13\x08\x08\x8d\xb6\x7f\xe6\x75\x92\xd5\xa0\xad\x84\xa8\xae\xe4\xc0\xbd\x96\xd5\x84\xb9\x26\x92\x7d\x26\x0d\x9b\x44\x34\x2b\x23\x3f\x97\xf3\x64\xa5\x68\xc6\x34\x24\xde\xa6\x47\xbd\x24\xcf\xac\x51\x71\x8d\x58\xe7\xed\xce\xb9\xdd\x69\xdb\x9d\xf7\xd6\xb6\x77\x2a\xb0\x80\x32\x83\xb4\x55\x7f\xb1\x90\xf5\x2d\x72\xc3\x90\xae\x4b\xb6\x1c\x33\x12\x79\x24\xc6\x61\xd5\xc4\x53\x60\x8f\xc4\x03\x07\x79\xd4\x87\x38\x55\xbe\x85\x57\xf8\x77\x1a\xe1\x35\x6f\x79\x74\x55\xe2\xd0\x4b\xc8\x41\x5c\x70\x27\x9f\x45\x4a\xa2\x26\x43\xca\xf9\x86\x9e\x60\x7d\xd5\x9a\xa1\xd3\x1c\x66\xf0\xb6\x92\x1a\x60\xdb\x0f\x9d\x11\xbe\x7d\x10\x22\x9d\xc8\xa9\xf8\xee\x20\xeb\x07\xcb\x10\x5e\x9a\xd6\xa9\xad\xe0\xf5\x54\xfe\xe2\x74\x71\xe4\x41\x78\x1b\x87\x14\xfb\x2e\xf3\x96\xe4\xb1\x69\xbd\x96\x58\xae\x40\xe8\x5c\xe1\x00\x42\x43\x96\x54\x27\x2c\x69\x20\x21\x49\xf8\x3e\xae\xc3\x94\x9e\xab\x98\x77\x89\x85\xb7\x94\x8a\xcb\xbf\xcc\x23\x6b\xe2\xa9\xcc\x8f\x9b\xf7\x7e\x49\x08\xde\xb9\xf3\x43\x73\x4f\x88\xb9\x20\x9e\x54\x6b\x8e\x43\x1c\x79\x24\x0a\x0c\xa4\x38\x11\x94\x7b\x38\x34\x53\x78\x72\xdf\x5a\x4b\xbd\x0d\x04\xfc\xc2\xd4\x11\xf1\x5d\x63\x2e\xb2\xbd\xd0\x40\xc4\x7c\x13\x3b\xff\xcd\xd4\x03\x9e\xa9\x87\xe0\x95\x33\xc6\x9c\xa7\x2b\xb3\x9e\xa3\x36\x17\x57\xda\x71\x64\x28\xcd\xe8\x8c\x81\xd0\x90\x39\xef\x3e\x4e\x90\x21\x9a\x8b\x26\xe9\xfd\xee\xe4\xdb\x8b\x95\xdf\x90\x2c\xc0\xdb\x78\x59\x98\xcd\x59\x2a\x1d\x33\xf8\x2c\x1c\xf4\xb5\x80\xe6\x97\x12\xb2\x16\x4b\x42\xe0\x96\x83\xfe\x5e\x01\xfc\x4b\xcd\x00\x8a\x74\xcc\x08\x65\x44\x6c\x2c\x07\x75\xda\xff\x5b\xa7\xf1\xf3\xe3\x77\xcb\x41\xd6\x03\x40\x8c\xc4\x12\x90\xda\xd5\x10\x5d\x20\xb2\x92\x75\x1b\x12\x14\x5d\xb4\xad\x86\x01\xb8\x3a\xc9\xd4\xec\x75\x1d\x10\xb2\x04\x0e\xf4\x92\x96\xe3\x27\x91\xc0\x41\x00\x7e\xc3\x48\x08\x59\x4a\xa8\x34\x87\x24\x55\x82\xbb\xb2\xe5\x9a\x32\x98\x2d\x71\xb4\x83\xe9\x26\x59\xcd\x81\x59\x0e\xba\x68\xd7\x68\x9e\x1a\xb4\xc6\xbb\x55\x4e\x55\x80\xcf\x31\x61\x50\x0f\xaf\x4f\x27\xbb\xfe\xfe\xc7\x49\xb1\x47\x1d\x2f\xe4\x19\x7d\x25\xc7\x6f\xf6\xff\x34\x55\x4b\x6b\x86\x97\x1e\x2c\xf4\xa3\x47\xc2\x68\x54\xde\x65\xb4\xc8\xe1\xe0\xe6\xf6\x6f\xf7\xdd\xd1\xcd\xcc\x1d\xdc\xf4\x27\xdb\xde\x2e\x5d\xc5\x89\x00\x4d\x74\x79\x3b\x18\xf6\xee\xaf\xfa\x37\xfd\x89\x3b\xec\xdc\x4f\xaf\xdd\xe1\x70\x4b\x39\x66\xe4\x91\x84\x10\x80\xaf\x93\xd9\xc2\x49\x33\x42\x03\x69\x42\x07\xe1\x35\x3f\xdb\x06\xd8\x33\x9f\x7a\x0f\xc0\x9c\xce\xfb\x56\xfb\x63\x2b\xb7\x56\x41\xcb\x3b\xcc\x08\x9e\x87\xc0\xcb\x39\x85\xce\xff\xdc\x9f\xa7\xf7\xbd\xfe\x27\xf7\x76\x38\xbb\x9f\xf4\xaf\x06\xa3\x9b\xf2\x96\x5b\x3f\x5a\x2c\x62\xa3\x93\x33\xc3\xb0\xdf\x70\xb8\x49\x7f\x3c\x9a\x0e\x66\xa3\xc9\x2f\xf7\xb7\x93\xc1\xfe\x21\x6b\xc7\xeb\x79\x5e\xd9\xf2\x1f\x58\x0b\x3c\xd6\x2a\xe7\x97\xe5\xcc\xe8\xec\xf4\x4b\x35\xb8\x95\xb2\x94\xed\x34\xc7\x63\x55\x38\x1c\x33\xc9\xaa\x3f\xa5\x89\x5a\x9e\xba\xa2\x03\x4e\x88\x52\x7f\xdf\x75\x40\xa4\xf3\x99\x8a\x87\x76\x47\xbd\xfe\x78\x30\xee\x0f\x07\x37\xb9\xd2\x6a\xb0\x69\x0c\x5e\x39\x52\x3e\x66\xe9\x56\xbb\x75\x5e\x68\x8e\x97\x98\x43\xa5\xa2\x88\x19\xdc\xeb\xfd\xbe\x32\x6d\x99\x5e\xe0\xc8\x6f\x2c\x40\x4e\xbf\xc3\x6b\x8e\xc0\x63\x28\x00\x61\x87\x34\x20\x11\xb2\xed\x88\xda\x24\xf2\xc2\xc4\x07\x1b\x56\x98\x84\xdf\x37\x70\xce\xdc\xab\x1f\xad\xd3\xef\xc0\x5b\x52\x74\x2a\xa7\xa4\xd7\xd4\xa4\x3f\x1d\x0d\xef\xfa\xbd\xfb\xe9\xe8\x76\xd2\xed\xdf\xdf\xf5\x27\xd3\xc1\xe8\x06\x7d\x45\x4b\xc0\x3e\xb2\x3d\xf4\xe1\xfb\x7a\xf4\xb1\xd1\xe0\xda\xbd\xea\x4b\xc7\xfa\xd1\x3a\xfd\x52\x76\xb5\x27\xe7\xf4\xcb\xcc\xbd\x7a\x6a\x62\xd3\x2b\x0f\xc5\x49\x18\x22\xeb\xb4\xcc\x67\xa1\xaf\x5f\xcb\x8b\x37\xe7\x5b\x07\x20\xd0\x52\x88\x98\x3b\x67\x67\xfc\xa2\xe2\x79\x6b\x2c\xf0\xfb\xf3\xf7\x36\x83\x10\x24\xd0\x67\x59\x89\xd4\x30\x12\x89\xb8\xc0\x61\x88\x32\x12\x74\x96\x70\x76\x16\x52\x0f\x87\x67\x73\x52\x2e\x09\x8f\x36\x4f\x3a\x3d\xc5\x87\x6c\x5b\xe0\x00\x59\xa7\x5b\xa8\x2c\x64\xdb\x1e\xf6\x96\x60\x2f\x18\x5d\x35\xcc\xbf\x55\x76\x10\xca\xc5\xf1\x1e\x92\xaa\x50\x13\x5d\x93\xb6\xcb\x3a\x7c\x59\x62\xde\x4b\xba\x7f\xe8\x2d\xdc\x44\x5d\x61\xe0\x10\x05\x10\x01\x93\x65\xac\xc8\xee\xd7\x4f\xb3\xd0\x80\x72\xd9\xe8\xff\x90\xe9\xb8\x00\x37\x57\xea\x0b\x22\xc3\x76\x23\x57\x43\x6d\xdf\xb8\xc4\x1b\x22\xc6\x2b\x55\xc8\x05\x09\x7f\xb9\x02\x59\xb9\xe6\x7f\xab\xe3\x97\x54\xc7\x32\x92\xab\x3d\x2b\x11\x4b\xca\xc8\xef\xaa\x2c\x9a\xd1\x07\xa8\x1e\x4d\x1d\x2c\xad\xb1\x06\xca\x01\xc4\x2c\x72\xf0\x9a\x3b\x21\x0d\xb8\x53\xde\xcd\x9d\xda\xb6\x2f\xa9\xec\x80\xd1\x24\x76\xce\xca\x09\xd4\x4e\xc0\xff\x48\xb9\xce\x91\x27\x0f\x4a\x7e\x97\x01\x16\x30\xa4\xc1\x95\x94\x71\x00\xdd\x54\x30\xc0\x2b\x33\xe1\x38\x11\x43\x1a\xf4\x1f\x21\x12\xd5\xda\xfe\x25\x86\xab\xc3\xc7\x2f\x1c\xc7\xc9\xf3\xac\xc6\x03\xc7\xa7\x23\x21\xe1\x17\x52\xff\xd1\x5c\xe6\xf9\x26\x82\x2b\x38\x94\x20\x5d\x51\xaf\x81\x42\x06\x82\x5c\x33\x7b\x5d\x88\x6d\xcb\xe3\xa6\xbc\xf4\x28\x80\xd2\x35\xda\xa3\xeb\x28\xa4\xd8\xbf\x65\xe1\x27\xca\x86\x78\x53\xbb\x1e\xc9\xc9\xb3\xe3\x1e\x55\x7d\xec\xa6\xea\x2e\xc1\x7b\x50\xa3\x15\x9f\xeb\x18\x79\xc6\xc9\x9e\x41\x07\x11\x11\x44\xba\xad\x1c\x52\x1f\x51\x19\x69\x75\xb7\xa2\x1c\x63\xd6\x6c\x5c\x49\x27\x6b\xb1\x10\x76\x8d\xf9\x4d\x0d\x5c\x39\x25\xda\x6b\x6b\x2e\xc3\x41\x3d\x36\xd4\xcf\x83\xb2\xa8\x5b\x11\x70\x05\x22\xbb\xaf\xd0\xb5\x72\xe1\x6e\x29\x73\x1d\x37\x8e\x43\xa2\x6f\xbd\xbb\x61\xc2\x45\x53\xdd\xdc\xef\xca\xe2\x59\xf7\x1a\xdf\xf8\xe9\xee\x63\x8e\x8a\x0a\xa2\xb3\xfd\xb7\x59\x74\xda\xab\x45\xf7\x20\x86\xc8\xe7\xa3\xc2\x93\xc6\x21\xc5\xfe\xa5\x3a\x17\x04\x36\x24\x5c\xc8\x04\xcc\xa0\x66\x3a\xd4\xa1\xf5\x7d\x09\x12\x54\xbd\x4c\xac\x63\x97\xd2\xcd\x30\x7f\xe8\xc1\x82\x48\x97\x2d\xae\x3e\x23\x37\x8d\x04\x26\xd1\x96\x5f\xbf\x2d\xd3\x38\x7c\x72\x27\x57\xf9\xe5\x95\xb6\xa0\xdc\xb7\x0d\xd7\x68\xd7\xf8\x33\x59\x25\xab\x31\x30\x4f\x6e\xee\xe8\xbc\x9d\x9f\x03\x5c\x93\x48\xf6\xfd\x04\x38\x14\xcb\xcd\x96\xe4\x6d\x7b\x3b\x38\x27\x0c\x7c\x75\x30\x94\xdf\xdb\x15\xd1\x2d\xa5\x35\x33\xcc\x02\x10\x6a\xaf\xa9\xdd\x6b\x95\x66\x5a\x1c\xa1\xc0\x54\x60\xd8\x02\xa0\x4b\xe9\x35\xcc\x9b\x3a\xc7\x94\x09\x07\x7d\xc8\xd4\x4d\xdf\x9b\x18\x80\x70\xd7\xfc\x31\xf6\x8c\x97\x8d\x2e\xe7\x24\x88\xb2\xe7\x7c\x0e\xea\xdf\xb8\x97\xc3\x7e\xaf\x40\x31\x05\x2f\x61\x44\x6c\x94\xae\xb5\xcb\xd7\x5d\x57\x76\xf6\x0e\x17\x2f\x8d\xda\xc0\xa9\xda\x07\xc5\x30\xa4\xdf\xe1\xd4\x14\xd8\xff\x04\x69\x3f\xe5\xa5\x21\x10\x64\x80\x1b\xd6\x63\xd9\xbd\x4d\x11\xe1\x13\x5e\x91\x70\x73\xd0\x2a\x8b\x13\x07\x59\x9d\xf6\xf9\x9b\xed\x4b\x4b\x58\xa9\xfb\x69\xeb\xbc\xfd\xe6\x83\x55\xb6\xb7\x3e\x0c\xc3\xca\xbc\x59\x45\x02\xbf\x25\x84\x01\x97\xf1\x1c\x0b\xb2\xbd\xd3\x2d\x38\x6b\x79\x19\x6d\x1f\xe9\x1c\xfd\x1c\xa7\x09\xa6\x1d\x27\x2f\x5b\x9a\x1c\xaf\x86\x87\x3a\x65\x7f\x4f\x8f\xf6\xac\xa5\x10\xb1\xef\x9c\xb7\xde\x94\xb3\x7e\x26\xae\x71\x1c\x93\x28\xa8\xb9\x84\x69\xa1\x20\xb5\x8a\x83\x1d\x17\xef\x43\x1a\xf4\x18\x79\x04\xa6\x80\x95\xb9\x5f\xa9\x7b\x14\x37\x3c\x40\x40\x19\xa9\xcd\xd4\x0e\xd6\xf4\xf6\xc6\x78\x98\x57\x64\xd7\x19\x71\x33\xf7\x2e\xd8\x87\x55\x35\xf3\x21\xb9\x4a\x6c\xed\x98\xc1\x82\x7c\xce\xf0\xdd\x67\xc2\x57\x2a\x85\x4d\xe2\xcc\xd5\xdd\x35\x8e\x70\x00\xbe\x2e\xf0\x5c\x56\xf6\x98\x2c\x99\x20\x78\xe5\xa8\xff\xc4\x8a\xec\x8c\xeb\xf8\x62\x33\x1a\xc2\x99\xab\x8a\xd7\x7e\x77\x2a\x97\x6a\xc9\xd9\xf5\xa0\xcf\x2a\xc0\xdb\x1f\xfe\x80\x02\x1c\x3c\x6e\x0b\xcc\x1f\xf8\x73\x0a\xf0\x7d\xde\x52\xb7\xb0\x6a\x75\xb2\x92\xc9\x64\xe6\xac\xff\x39\xa6\x96\x12\xcc\xa6\x9e\x80\x80\x48\xd2\x0f\xa2\x1e\xde\x70\x07\x75\xde\xec\xcc\x90\x4a\xdb\x87\xe9\x45\x68\x91\xc6\x34\xa5\x63\xe7\xd3\x24\xdf\x3c\x2d\xd5\x5d\xfc\xf9\xc9\x0e\x21\xa8\x20\x25\xf3\x83\xed\xe6\xab\x47\x42\xdf\xd5\x24\x6d\x0f\x6f\x4b\x1a\x0d\xa2\x80\x01\x2f\xad\x97\x2e\xf1\x99\xdc\xe0\xeb\x6f\xba\x95\x3a\x8c\xae\x74\xb4\xb4\x4a\xed\x33\x9a\xb6\xbe\x7b\xfb\xf6\xe2\x6d\xb1\x67\x10\x8f\x19\x15\xd4\xa3\xa1\x83\x84\x97\x6d\xe1\x87\x3d\x75\x6e\x4a\x88\x1a\x8c\xa8\x6f\xbb\x73\x22\x12\x05\x77\xe7\xd2\x4b\x73\xae\x97\x5e\x5c\x99\x92\x1b\x73\x62\x63\x37\x6a\x6f\x4e\x67\xaa\xa9\x4c\x2d\x8d\x39\x2c\x85\x39\x34\x7d\x31\x2a\xf5\xea\x8b\xc4\x28\xf9\x1b\x2d\x8f\xe2\xf8\xff\x41\xeb\xa2\x50\x28\x1c\xbe\x44\x0a\x4c\x07\x55\x8b\x2f\x5c\x45\x5a\x9c\x56\x8c\x64\x53\xae\x24\x5f\x39\x2a\x3f\xcd\x66\xe3\xa3\x60\xc9\x45\xe8\x22\x4b\x08\x46\xe6\x89\x80\xfa\x8f\x40\x7c\x60\xfa\x08\x48\x45\xd1\x7b\x1f\x42\xbc\x69\x09\xb2\x02\x9a\x88\x7b\x0e\x1e\x8d\x4a\x8f\x73\xd2\x5f\x7c\xa9\xc2\x6f\x57\x11\x7d\x44\x6c\x4a\x39\xcc\x3b\x68\x3e\x7a\x29\xdf\x36\x16\x8a\x47\xa0\xd9\x83\x05\x4e\x42\x51\x7b\x26\xfb\x4d\x4b\x54\x8d\xc2\x82\xb2\x35\x66\xc5\xc7\x91\xc5\x17\x99\xaf\x94\x41\x16\x45\xfc\xb5\x6e\x53\x4a\xe7\x51\x7f\xce\x95\x4a\x06\xde\x5f\xfd\x4a\xa5\xd6\xbe\xfb\xc9\x5c\xf1\xa5\xe7\xb1\xef\xdc\x64\x69\x61\x1e\x35\x7d\x25\x68\x7a\xaf\xc6\x76\xb0\xea\x4b\xdf\x63\x5f\xba\xbd\xde\xeb\xbf\x13\xfd\x66\x5f\x79\x56\xf5\xe1\x5c\xe9\xe5\x46\x53\x52\xb4\xf3\x77\x21\x36\xea\x86\x34\x82\x5b\x16\x4e\xf9\xf2\x04\xa1\x7e\xe4\xc7\x94\x64\xae\x71\xc4\xd8\x0d\x21\x51\x76\xf7\x6e\xa6\x6a\x1f\xfa\x57\x00\x00\x00\xff\xff\xba\x74\xb9\xd2\x0a\x3e\x00\x00")

func assetsPlatformYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPlatformYaml,
		"assets/platform.yaml",
	)
}

func assetsPlatformYaml() (*asset, error) {
	bytes, err := assetsPlatformYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/platform.yaml", size: 15882, mode: os.FileMode(420), modTime: time.Unix(1518940347, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/platform.yaml": assetsPlatformYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"platform.yaml": &bintree{assetsPlatformYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

