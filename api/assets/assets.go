// Code generated by go-bindata.
// sources:
// assets/platform.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsPlatformYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x69\x6f\xe3\x36\xf6\x7b\x7e\x05\xab\xcd\xa2\x07\x6a\xc7\xce\x1c\x9d\x21\xd0\x05\x14\x5b\x93\x1a\xeb\xc4\x86\xed\xa4\xdb\x16\x85\xc1\x48\xcf\x36\x1b\x99\x54\x49\x2a\xae\x3b\x9d\xff\xbe\xa0\xa8\x5b\xa2\xe3\x64\x66\x5b\x2c\x76\x5d\xa0\x98\xe8\x1d\x7c\x17\xdf\x41\xd2\xfd\x7e\xbe\x80\x6d\x14\x12\x05\xef\xb8\xd8\x12\x75\x0b\x42\x52\xce\x30\x72\xce\x7b\xfd\x5e\xa7\xf7\xb6\xd3\x7b\xeb\x9c\x0c\x41\xfa\x82\x46\x2a\x81\x7c\x07\x82\xaf\x89\x02\x34\x0d\x89\x5a\x71\xb1\x45\x19\x0b\xf4\xd0\xef\xf6\x4e\x4e\x66\x20\x79\x2c\x7c\x90\xf8\x04\xa1\xbf\xa1\x6b\x50\x3b\x2e\xee\x4f\x50\x4e\x99\x7e\xd1\x60\x84\x16\xfb\x08\x30\x72\xdc\xef\xe7\x18\x7b\x83\x73\x8c\x6f\xa7\x03\x27\x81\x4c\x05\x8f\x40\x28\x6a\x18\xe9\xdf\x80\x06\xe2\x22\xe4\xfe\x3d\x46\x4e\xff\xed\x79\xb7\xff\xfa\x4d\xb7\xd7\xed\x9d\xf5\x5f\x3b\x29\xc6\x82\xac\x73\x6c\x84\x3a\xe8\x9f\xb0\xc7\xe8\x9a\x6c\x21\xff\x86\xd0\x2d\x09\x63\xc0\xe8\xb3\x19\xac\x50\xb2\xec\x5c\x11\xff\x3e\x45\xaa\xc9\x38\x8f\xef\x18\x28\xd7\x22\xaa\x81\xda\xa4\xbd\x8d\xfc\x51\x90\xae\x53\x63\x9b\x62\xb8\x0f\x84\x86\xe4\x8e\x86\x54\xed\x7f\xe4\x4c\x0b\x35\x87\x10\x7c\x85\x7e\x42\xbd\xaf\xd1\x67\x97\xa0\xdc\x1f\x25\xfa\xf9\x11\xf5\xcf\x7b\x99\xfa\x57\x24\x9a\xc6\x77\x21\xf5\x47\xd1\x84\x8d\x49\xcc\xfc\x0d\x46\x4a\xc4\xf0\x0c\xf3\xcc\xe3\x3b\xe4\x9c\xbe\xaf\x5a\xe8\x03\x32\x3a\x23\xd7\xb1\x19\xeb\xe2\x2f\x30\x56\xff\x38\x63\xf5\x5f\xff\x45\xd6\xba\x68\xb1\xd6\x8c\xc7\x0a\x16\xe4\x2e\x04\x8b\xc1\x0a\x84\xe7\x1b\xed\x53\xef\x87\x49\xac\xee\x78\xcc\x82\x44\xb6\x43\x72\xdb\x44\x2e\x94\xb2\x49\x5e\x60\xa4\x24\x43\x90\x8a\x32\xa2\xb3\x4f\xd9\xa9\xbd\x6e\xf2\xdf\x59\xee\xce\x4b\xa2\x60\x47\xf6\x36\xbe\x29\xb8\xa9\x53\x0a\xb0\x68\x33\x62\x0a\x04\x03\x95\x62\xd9\xf4\xfa\xd4\x86\x4e\x97\x73\x95\x22\xfe\x66\x0b\x4c\xd9\xb3\x65\x03\xf5\xf9\xe1\x52\x53\xf6\xc9\xa6\x4c\xd3\xe5\xa1\xe8\x30\x28\x85\x93\x5d\x29\xb9\x4f\x13\xef\xda\xe4\x36\x24\x36\x61\xd2\x35\x9f\x17\x5f\xed\x19\xec\x2f\x90\xff\xe2\x39\xf2\x27\xf5\x75\x4a\x23\x08\x29\x2b\x6b\x93\x7d\x6a\xaa\x30\xe0\x41\x01\xc5\xd9\xbf\x6c\x82\xeb\xd0\xb4\xc5\x6b\x92\x92\x85\xa2\x2b\xe2\xab\xb9\xe2\x02\x8a\xe8\x37\x0b\xce\x5f\xe4\x1f\xc6\xdc\x27\xa6\x79\xa8\x28\x94\x2d\x5f\x61\x93\xd9\x01\xa4\x22\x42\x79\xbf\x81\x1f\x6b\xd2\x09\xbb\x89\x02\xa2\x00\xa3\x15\x09\x65\x8e\xc5\x43\x70\x85\xe6\xab\xb3\xbf\x52\x0d\xd6\x1a\xa1\xeb\x0a\x96\x79\x42\x91\x35\x54\xf6\xa9\x51\x71\x06\x11\x97\x54\x71\xb1\x2f\x6d\x57\xd7\xd7\x0b\x97\xb0\xcb\x14\x83\x0d\x61\x6b\x98\x27\x8d\x4e\x05\x21\xa3\xd3\x46\x18\x05\xb8\x06\x43\x68\x40\x14\xac\xb9\xd8\x63\xd4\x4a\x8c\xd0\x64\xc7\x40\x60\x6d\xf0\x06\x68\x2a\xf8\x03\x0d\x34\x54\xfb\x71\xc0\xb7\x5b\xaa\x1a\x48\x79\x0b\xd7\xaf\x81\x06\x9c\xad\xe8\x3a\x16\xc6\x15\x0d\xba\xc2\x06\xa9\xdb\x6b\x26\x2d\xe0\xdd\x5a\x5e\x33\xbf\x0b\x41\x98\xbf\x31\xb4\x5b\x22\x15\x88\xa6\xfc\x3c\x0c\xdf\x71\x61\x14\x37\x16\x94\x55\x87\xe6\x46\x88\x55\x14\xab\x2c\x30\x64\x53\xda\xcc\x0f\x99\x74\x35\x63\x66\xe0\x8b\x98\x86\x41\x45\x92\x83\x5e\x4d\xd0\x9f\xe9\xce\x36\xda\x27\x78\xb3\x9d\xfc\xb9\xce\x9c\x0a\xfe\x0b\xf8\xaa\xb4\x81\x33\x43\x35\x2d\x82\x92\xc4\xff\x51\xe6\x4e\x75\x7d\xaa\xd3\xaa\x3a\x67\xd0\x21\x44\x21\xdf\x1f\xef\x34\x83\xff\x4c\xaf\xb5\x12\x1f\xeb\xb6\x90\xc7\x81\x99\x9b\x28\x67\x9f\xcc\x77\x79\x96\x3d\x94\x7a\xeb\x9a\x5e\xf1\x40\x67\xa5\x99\xe7\x2e\xbc\xe5\xcd\x74\xe8\x2e\xbc\x16\xad\x23\xd3\x3f\xeb\x14\x8f\x06\xee\xd4\xbd\x18\x8d\x47\x8b\x1f\x96\xd7\xee\x95\x37\x5c\x8e\xdc\xab\x06\x49\x36\xda\x4d\x89\xda\xd4\xfc\x86\x71\x94\x0e\x80\xdd\x3d\xd9\x86\x1f\x19\x50\x59\x28\x1c\xac\x0d\xcd\x7a\x36\x7f\x81\xf1\x45\xec\xdf\xdb\x07\x0b\x03\x4d\xcd\x99\x74\xe9\x9b\x74\x89\x4e\xda\xae\xbb\xbe\xcf\x63\xa6\x46\xc1\x87\xec\xcb\x0c\xd6\x94\xb3\xfc\xcf\xa2\x9f\x77\x5a\x24\xd4\x25\xa6\x29\xd8\xc8\xbd\xd2\x9d\xb0\xbd\x77\xd7\xb0\xb2\x54\x6d\x6c\xdb\x05\x48\x9c\x2e\x65\xbc\x4d\x70\xa6\x3c\xa4\xfe\x7e\xc8\xfd\xb8\xe8\x12\x2b\xd1\xa7\x27\xf9\xf3\x4e\xbf\xd7\xe9\x7f\xe3\x9c\x94\x62\x4c\x41\x95\x40\xfb\xc4\x5b\xad\xc0\x57\x18\xb9\x61\xc8\x77\x15\x9f\x4d\x05\x65\x3e\x8d\x48\x58\x77\xe5\x1c\xc4\x03\xf5\x01\x23\x9f\x07\x10\xa5\xc2\x77\xc9\x96\xfc\xce\x19\xd9\xc9\xae\xcf\xb7\x27\xcd\x70\xc5\x48\x2a\x89\x0b\x2d\x52\x94\x44\x19\x5a\xad\xd0\x46\xc1\x43\xa6\x32\x18\x76\x63\xe5\x9c\x5b\xcc\xf4\xb8\xa9\xac\xe6\x7a\xcc\x64\xc8\xb4\x31\x49\xa6\xc4\xc8\xf9\xca\xb1\x6c\xdd\xe6\xe6\xd0\x7c\xb5\x39\xfd\xa4\xc2\xe3\x01\x61\x3e\x84\x37\x51\xc8\x49\xe0\x0a\x7f\x43\x1f\x9a\x59\xa0\x46\x72\x09\xca\xd4\xe3\x23\x10\x2d\x7d\x44\x13\xb1\x22\x81\x36\x49\x2c\x1f\xa3\x3a\x4e\xe8\xbb\x24\x9f\x5c\x10\xe5\x6f\xb4\xe0\xfa\x2f\x3b\x67\x83\x3c\xd7\xdd\x61\x7b\xcd\xd4\x88\xe0\x9f\xe3\xaf\xda\x21\x21\x91\x8a\xfa\x5a\xac\x3b\x12\x12\xe6\x53\xb6\xb6\xa0\x92\x58\x71\xe9\x93\xd0\x8e\xe1\xeb\x0a\xb0\xd3\x72\x5b\x10\xe4\x0b\x1b\x80\xc9\x43\x3c\x57\x59\x55\xb1\x20\x89\xc0\x46\x2e\x7f\xb5\x41\xc0\xb7\x41\x28\xd9\xe2\x29\x91\x32\xdd\x89\xcd\x8e\xaf\x7d\x90\x30\x81\xa3\xd3\x65\x86\x67\x4d\x76\xf5\xde\xf2\xe0\x08\xac\xd3\xaf\x54\x6d\xab\x7a\x83\xd9\xa7\x5a\x2e\x99\x9d\x8a\x66\xa8\xd6\x1e\xb5\x2b\x9c\xd6\xbd\xb4\xb9\x7a\xee\xd4\xe4\xb1\x07\x2a\x38\xab\xa6\x13\xb3\xd4\x78\x74\x7d\xf3\xaf\xe5\x60\x72\xbd\x70\x47\xd7\xde\x2c\x87\x0e\xf8\x36\xd2\x53\x5f\x82\x74\x71\x33\x1a\x0f\x97\x97\xde\xb5\x37\x73\xc7\xfd\xe5\xfc\xca\x1d\x8f\x73\xcc\xa9\xa0\x0f\x34\x84\x35\x04\xa6\x23\x28\x1d\x67\x21\x34\xda\x92\x35\x60\x44\x76\xf2\x2c\xdf\x49\x67\x01\xf7\xef\x41\xe0\xfe\x37\xdd\xde\xdb\x6e\x2f\xc7\x2d\x49\x79\x4b\x04\xd5\xf3\xa6\xac\x16\x0b\xa3\xa7\xfb\xfd\x7c\x39\xf4\xde\xb9\x37\xe3\xc5\x72\xe6\x5d\x8e\x26\xd7\xd5\xdc\x5a\x3f\xf3\x30\xb5\xb5\x85\xd1\xcc\x9b\x4e\xe6\xa3\xc5\x64\xf6\xc3\xf2\x66\x36\x6a\x65\x52\x3e\x64\x2b\xaa\x76\x37\xb8\x17\x5d\xf0\x45\xb7\x5a\xbd\xab\x35\xe8\xec\xf4\x7d\x3d\xbc\xf2\xfa\x90\x96\xb0\xa4\x90\x37\xc6\x9e\x34\x20\xea\x83\xa4\xc9\xea\x35\xf7\x0d\x26\x43\x6f\x3a\x9a\x7a\xe3\xd1\x75\xd1\x7d\x25\x0c\xe6\x11\xf8\x18\xfd\x51\xd2\xea\x21\x2b\x3a\xbd\xee\x79\xe9\x73\xb4\x21\x12\x6a\xfd\x52\x24\x60\x69\xb2\x5e\x6d\xf7\xea\x24\x4b\x58\xd0\xda\x5e\x9d\x7e\x41\x76\x12\x81\x2f\xd0\x1a\x54\x27\xe4\x6b\xca\x50\xa7\xc3\x78\x87\x32\x3f\x8c\x03\xe8\xc0\x96\xd0\xf0\xcb\x16\xca\x85\x7b\xf9\xad\x73\xfa\x05\xf8\x1b\x8e\x4e\xb5\x4a\x26\xe0\x66\xde\x7c\x32\xbe\xf5\x86\xcb\xf9\xe4\x66\x36\xf0\x96\xb7\xde\x6c\x3e\x9a\x5c\xa3\x3f\xd0\x06\x48\x80\x3a\x3e\x7a\xf3\x65\xb3\xc4\x75\xd0\xe8\xca\xbd\xf4\xb4\x4b\xbf\x75\x4e\xdf\x57\x9d\xfc\x01\x9f\xbe\x5f\xb8\x97\x1f\xaa\x64\x4f\x56\xd5\x44\xb0\xa1\x43\x9d\x8e\x22\x6b\xe4\x9c\xe6\xcb\x3a\xa8\x5b\xb5\x26\x97\xea\xe9\xe6\x4c\xd7\x88\x62\xb9\xa9\x30\x6f\x41\x8d\x04\x65\x6a\x85\x3e\xff\xe9\xbd\xc3\xc8\x16\x1c\xec\xec\xe0\xce\xf9\xda\xa1\x7a\xf7\xdd\x08\xea\x60\xe7\xef\xd2\xf9\xf0\xf3\xe7\x55\x29\xff\x81\x12\x04\xd9\xfd\x45\x56\xf6\x07\x69\x6f\xa2\x57\x54\x6f\xc8\x16\x9a\x96\xa6\xbb\x35\x3a\x5b\x02\xfc\x13\xb6\xb1\x25\xae\xff\x75\x5d\x6c\x12\x1c\xff\x6f\x61\xd3\xdf\x51\x2d\xac\x4e\x34\xba\x45\x74\x63\xb5\xe1\x82\xfe\x9e\xf4\x2e\x0b\x7e\x0f\xf5\xb1\xf8\xe8\xd5\x5a\x1b\x15\x63\x3c\x22\x18\x26\x3b\x89\x43\xbe\x96\xb8\x9a\xf4\x71\xa3\x3a\x68\xac\xce\x5a\xf0\x38\xc2\x67\xd5\xc2\x77\xd0\xd8\x7f\xd6\x9a\xf8\x89\x63\x41\xb2\xfe\x40\x00\x51\x30\xe6\xeb\x4b\xbd\xc6\x11\x78\x73\x25\x80\x6c\xed\x88\xd3\x58\x8d\xf9\xda\x7b\x00\xa6\xea\x8d\xf7\xf1\xe1\x51\x35\x94\x7c\x81\x31\x2e\x8a\x6e\xeb\x3c\xff\xe1\x89\xca\xcb\x17\x5a\xd2\xc9\x9d\xee\xbe\x6c\x08\x97\x70\x2c\x42\xba\x67\x3e\x4e\xdf\x4c\x5d\x1d\xff\x8f\x86\x85\xc8\xfb\xd2\xb6\x76\xe4\x49\xa6\x48\xf7\xdb\x90\xef\x98\x1e\x65\x6e\x44\xf8\x8e\x8b\x31\xd9\xb7\x9c\xba\x66\xe8\xd9\x7c\x95\x74\x81\x87\xb1\x06\x1b\xf0\xef\x13\x6e\xe5\x5b\x57\x2b\xcd\x34\x7e\x84\xe9\x88\x51\x45\x75\x28\x6a\x96\x66\x26\xb4\xe2\x1a\x70\x82\x39\x25\xa2\xdd\x8d\x1a\x4f\xf7\xc4\x21\x54\x79\x26\x4d\x7d\xe9\xfc\x30\xb3\xb1\x1b\x45\x21\x35\x77\x10\x83\x30\x96\xaa\xad\xc1\xf7\x06\xba\xcb\x37\x50\xeb\x03\x04\x03\x3e\x66\x88\x29\x2d\x99\x15\x97\xf6\x25\x53\xa8\x59\x72\x08\x11\xb0\x40\x4e\x4a\xef\x2c\xc6\x9c\x04\x17\xc9\xa4\x0a\x62\x4c\xa5\x02\x96\xfa\xb8\xe5\xa2\xc9\xb0\x7a\x6c\x00\xc9\x4c\x50\x3d\x18\x6e\xda\x28\x45\x5f\x10\x79\x3f\x84\x15\xd5\x3e\x6c\xdc\xe1\x94\xa9\x38\x53\x84\xb2\x9c\xce\xdc\xa8\x1b\x7d\xdf\xb9\xb3\xcb\xe2\x48\xd2\x78\x48\x17\x23\xcb\x51\xe8\x15\xf9\x8d\x6e\xe3\xed\x14\x84\xaf\x2b\x16\x3a\xef\x15\x83\xc9\x15\x65\x1a\xf6\x1d\x90\x50\x6d\xf6\x39\xca\xab\x5e\xce\x5c\x52\x01\xc1\x40\x6f\xba\xe2\xec\xb5\x6c\xc5\x4a\x6d\x5e\x10\xb1\x06\x95\x24\x52\x73\x93\x54\xd6\xae\x4c\x55\x42\x2c\xc5\x64\xae\xb4\x31\xfa\x0e\xee\xda\x80\x53\x2e\x14\x46\x6f\x32\x11\xd3\x9b\x3c\x8b\xf2\xee\x4e\x3e\x44\xbe\xf5\x90\xd8\x95\x92\xae\x59\xf6\x70\x01\x23\xef\xda\xbd\x18\x7b\xc3\x12\xc6\x1c\xfc\x58\x50\xb5\x4f\x64\x6d\x1c\x9a\xd7\x07\x9c\x66\xa0\x56\xe8\xbb\xc9\xff\x47\xe5\xfd\x6a\x6e\x2c\x25\x46\x75\xce\x8f\xde\xce\x3e\x8e\x79\x61\xd9\xb5\x99\x25\x2d\x9b\xa8\x1a\xa3\xb6\xed\xfb\x8e\x6c\x69\xb8\x3f\xb8\x35\xa2\x18\x23\xa7\xdf\x3b\x7f\x99\x3f\x12\x81\x6d\x72\x51\xe0\x9c\xf7\x5e\xbe\x71\xaa\x0e\x34\x23\x36\x49\xfc\x95\x1f\x3d\xfc\x1a\x53\x01\x52\x67\x27\xa2\x68\x7e\xdc\x5e\x8a\xb8\xea\x5e\xc8\x6f\x38\xad\x77\x99\x6d\x66\xa8\x8d\xa3\xf9\xf7\xc2\x06\x2d\xb7\x9c\xd5\xe0\x4c\x0f\x03\x9c\x8d\x52\x51\x80\xcf\xbb\x2f\xab\xbd\xa6\x50\x57\x24\x8a\x28\x5b\x37\x02\xc8\x16\xd5\x28\xd9\x66\xeb\x03\xb7\x1b\x63\xbe\x1e\x0a\xfa\xa0\x53\x0f\xd9\x49\xdd\x79\x54\xc0\x93\xa8\xe5\x96\x07\x65\xa8\x1d\x91\xd4\xd5\x83\x67\x09\x65\x74\xd3\x7f\x3d\x9e\xad\xc6\x75\x31\x0a\x16\x32\x69\x9b\x3a\x91\x80\x15\xfd\x2d\xb3\xdf\x63\x6e\xf9\x84\x43\x94\x6d\x09\xfb\x9c\x70\x45\x18\x59\x43\x60\x46\x05\x57\x54\xa3\x20\xeb\x55\x28\xd9\xe2\xe4\x1f\x51\x82\x76\x26\xcd\xb6\xef\x08\x1e\xc2\x99\x9b\x8c\x3d\xde\x60\xae\xb7\x54\x25\x38\x0d\xd3\x67\x8d\x6e\xbd\x37\x7f\xc2\xe8\x06\xbe\xec\x28\x22\xef\xe5\x73\x46\xb7\xc7\x22\xa4\xe9\xd5\xe4\x2b\xce\x9a\x70\x9b\x6b\x33\xf8\xb1\xee\xd5\x5c\xed\xee\x9d\x81\x02\xa6\xf1\x47\x6c\x48\xf6\x12\xa3\xfe\xcb\x83\x2d\x47\x25\x93\xdb\x1e\xb4\x94\x71\x6c\x6a\x1c\xa3\x43\xdb\x9a\x76\x55\x12\x70\xe5\x61\x69\x95\x31\x2a\x71\xce\x7c\x9c\x57\x36\x43\x8d\xbe\x68\x70\xff\xb2\x38\xd3\x2b\x49\x31\x62\x6b\x01\xb2\xb2\x17\x06\x34\x10\xba\x7a\x36\x9f\x91\xe9\xdf\x3b\xc1\xb7\x26\xbb\x39\x95\xef\x0b\x9e\x7e\x7d\xfd\xea\xd5\x8b\x57\x65\xc8\x28\x9a\x0a\xae\xb8\xcf\x43\x8c\x94\x9f\x75\x08\x87\x5f\x5c\xb5\x75\x19\x2d\x4e\x32\x17\x16\x05\x12\x65\xeb\xdb\x73\x1d\x79\x05\xd5\x73\x8f\xa2\x6d\x9d\x42\xb3\x4b\x28\xaf\x76\xa8\x3f\x68\xf6\x06\xc7\xf5\x05\xc7\xf6\x04\x56\x39\xfe\x23\xd1\x6d\x5d\xed\x23\xe2\xba\xcc\xf3\x7f\x20\xa0\x4b\x6d\xf3\xf1\xb1\x5d\x22\x3a\x6a\x2e\x7a\x66\xf8\x9b\x65\x8c\x40\x34\xca\x0f\xf0\x2a\x5d\x4d\x61\x85\xef\x16\x8b\xe9\x51\x66\x28\x58\x9b\xb1\x42\x29\x41\xef\x62\x05\xcd\x07\xa2\x01\x08\x33\xfd\x27\x69\x6e\x19\x40\x48\xf6\x5d\x45\xb7\xc0\x63\xb5\x94\xe0\x73\x56\xb9\x08\x4d\xef\x41\x92\x51\xe7\xd0\x78\xf8\x84\x24\x92\x52\xd8\xcb\x57\xc1\xfd\xf0\x78\xf4\x04\xeb\x0d\x61\x45\xe2\x50\x35\x1e\xf5\x7c\xf4\x30\x66\x34\x5e\x71\xb1\x23\x22\x38\x39\x31\xef\x91\x92\x05\xea\x57\x99\xd9\x8d\x92\xfd\x8d\xdb\x20\xe4\x0c\x6e\x44\x38\x97\x9b\x13\x84\x3c\x16\x44\x9c\x66\xdd\x8a\x85\xba\x2c\x60\x77\x78\x3d\x4f\x22\xed\xdf\x01\x00\x00\xff\xff\x19\xbf\x3f\xbc\x63\x31\x00\x00")

func assetsPlatformYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPlatformYaml,
		"assets/platform.yaml",
	)
}

func assetsPlatformYaml() (*asset, error) {
	bytes, err := assetsPlatformYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/platform.yaml", size: 12643, mode: os.FileMode(420), modTime: time.Unix(1518854077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/platform.yaml": assetsPlatformYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"platform.yaml": &bintree{assetsPlatformYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

