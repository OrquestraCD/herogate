// Code generated by go-bindata.
// sources:
// assets/platform.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsPlatformYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7b\x6f\xe3\x36\xb6\xff\x3f\x9f\x82\xd0\xcd\x45\x1f\xb8\x76\xec\xcc\xa3\x33\x04\x7a\x01\xd9\x56\x52\x63\x9d\xd8\xb0\x9d\x74\xdb\xc5\xc2\x60\x24\xda\x66\x23\x93\x2a\x49\xc5\x75\xa7\xf3\xdd\x17\x24\x25\x4b\xb4\x44\x3f\x92\x49\x77\x17\xbb\x9a\x7f\x62\xf1\x1c\x9e\xc3\xdf\x39\x3c\x0f\x52\xe3\xff\x38\x99\xe2\x55\x12\x23\x89\xaf\x18\x5f\x21\x79\x8f\xb9\x20\x8c\x42\xe0\x5d\xb6\xda\xad\x46\xeb\x63\xa3\xf5\xd1\x3b\xeb\x61\x11\x72\x92\x48\x3d\xf2\x03\xe6\x6c\x81\x24\x06\xa3\x18\xc9\x39\xe3\x2b\x90\x4f\x01\x9e\xda\xcd\xd6\xd9\xd9\x18\x0b\x96\xf2\x10\x0b\x78\x06\xc0\xff\x80\x5b\x2c\xd7\x8c\x3f\x9e\x81\x2d\x67\xf6\x46\x0d\x03\x30\xdd\x24\x18\x02\xcf\xff\x71\x02\x61\xd0\xbd\x84\xf0\x7e\xd4\xf5\xf4\xc8\x88\xb3\x04\x73\x49\xcc\x44\xea\xe9\x92\x88\x77\x62\x16\x3e\x42\xe0\xb5\x3f\x5e\x36\xdb\xef\x3f\x34\x5b\xcd\xd6\x45\xfb\xbd\x97\x51\x4c\xd1\x62\x4b\x0d\x40\x03\xfc\x05\x6f\x20\xb8\x45\x2b\xbc\x7d\x07\xc0\x3d\x8a\x53\x0c\x4b\x2f\x00\x18\xe3\x39\x04\x5a\x85\x89\x44\xe1\x63\xc6\xb0\xa3\xef\x24\x7d\xa0\x58\xfa\x0e\xb5\xcd\xa8\x4b\xf3\xfb\x24\xec\x47\x85\x4c\x2d\x6f\x67\xfa\x6c\xd0\x7f\x42\x24\x46\x0f\x24\x26\x72\xf3\x33\xa3\x25\x45\xaf\x28\x84\x13\x1c\xe3\x50\x96\x95\x6f\x80\x96\xf5\x4b\x51\x5d\x63\xe9\xff\x2c\x20\xf0\xbc\x03\xc0\x5d\xb6\x72\x8a\x1b\x94\x8c\xd2\x87\x98\x84\xfd\x64\x48\x07\x28\xa5\xe1\x12\x02\xc9\x53\x7c\x32\xb0\xc0\x42\x56\x2b\x9d\x3e\x40\xe0\x9d\x7f\xb2\x01\xfe\x0c\x0c\x64\xc0\xf7\x5c\x58\x77\xfe\xe5\xb0\x6e\x3f\x0f\xeb\xf6\xfb\x57\x02\xfb\x54\xac\x3b\x35\x58\x8f\x59\x2a\xf1\x14\x3d\xc4\xd8\x01\x77\x41\xf0\x72\xc8\x5f\x73\x83\x0e\x53\xf9\xc0\x52\x1a\x69\x7d\xf7\xad\xc5\xb5\x8c\x62\xa1\x87\x56\x53\x50\x66\x64\x3d\x2c\x24\xa1\x48\x85\xc8\xb2\x03\xb4\x9a\xfa\xdf\xc5\xd6\xf4\xd7\x48\xe2\x35\xda\x1c\x9a\x3f\x23\xab\xae\x31\x1b\x70\xac\xae\x4f\x25\xe6\x14\xcb\x8c\xca\xb5\xce\xd7\x34\x42\x26\xda\x97\x12\x85\xcb\x15\xa6\xd2\x1d\xe6\x2b\xa4\x2f\x77\xaf\x1d\x00\x9e\x0d\x73\x16\xeb\xf7\x79\x92\x21\x29\x1c\xc1\x17\x82\x85\x44\x7b\x80\x6b\x1d\x86\xe5\x90\x52\x99\xec\x97\xf9\x64\x7d\x3c\xfd\x27\xae\xa7\xf3\x92\xf5\xe8\x42\x62\x44\x12\x1c\x13\x5a\x5e\x5d\xfe\xaa\xba\xa4\x2e\x8b\x8a\x51\x98\xff\xe5\x5a\x88\x72\xe5\x1d\x65\x2a\x7e\xae\x1e\x9f\x4b\x32\x47\xa1\x9c\x48\xc6\x4b\x0c\x46\xf0\xe4\xcd\xf6\xc5\x80\x85\x1a\xb8\xf2\xfe\xb1\x96\x98\x2b\x64\x4d\x98\x23\x84\x85\x44\x5c\x06\xbf\xe1\x30\x55\x93\x0c\xe9\x5d\x12\x21\x89\x21\x98\xa3\x58\x6c\xa9\x58\x8c\x7d\x4e\xed\x94\xa5\x92\x91\xdc\x49\x59\xbb\x22\x15\xa3\x45\xe0\x73\x9a\xdb\x53\xa2\x05\xb6\x22\x83\x06\x06\x8c\x71\xc2\x04\x91\x8c\x6f\x4a\x8c\x7e\xa8\x94\x13\x76\x88\xc8\x39\xba\x4b\x44\x17\x78\xa2\xeb\x40\x8b\x20\xe7\x53\x90\x95\x1d\x20\x7f\xba\x48\xe2\x05\xe3\x1b\x08\x6a\x99\x01\x18\xae\x29\xe6\xda\x3c\x95\xa1\x11\x67\x4f\x24\x52\xa3\xca\xfa\x5d\xb6\x5a\x11\x59\x21\xda\x56\xb8\xed\x9d\xa1\x2e\xa3\x73\xb2\x48\x79\xc5\x70\xe6\x29\x30\xb0\x9d\xa5\x78\xea\x0d\x50\xc6\x26\x37\x45\x2d\x9e\x65\xc2\x9d\x58\x6c\x9e\x0e\x47\x34\x5c\x1a\x7c\x57\x48\x48\xcc\xab\x08\xb0\x38\xbe\x62\xdc\x40\x67\x6c\x20\x6c\xb7\xc9\x9f\x61\x2a\x93\x54\xe6\xee\x27\xaa\x1a\xe7\x96\xcc\x75\xde\x31\x47\x3e\xdc\x49\x49\x1c\x59\x9a\xec\xf5\x0b\x4d\xfe\x4c\x87\xa8\xe3\x3d\xc1\x1f\xea\xd9\x9f\xeb\x0e\x23\xce\x7e\xc1\xa1\x74\xf9\x82\xb5\xd9\xab\x18\x01\x9d\xaa\x5e\x64\x80\x6c\xf5\xa7\x9a\xd1\x46\x21\x1f\xed\xe1\x24\x66\x9b\xe3\xcd\x68\xe8\x9f\x69\xc7\x5a\xe6\x63\x0d\x19\xb3\x34\x32\xad\x2a\x61\xf4\x8b\x59\x73\x1b\xe7\x9d\xb6\xac\x4d\x07\xbb\x6b\xbf\x61\x91\x8a\x7d\xe3\xc0\x9f\x06\xb3\xbb\x51\xcf\x9f\x06\x35\x38\x24\xa6\xe3\x50\xe9\x07\x74\xfd\x91\xdf\xe9\x0f\xfa\xd3\x9f\x66\xb7\xfe\x4d\xd0\x9b\xf5\xfd\x9b\x0a\x4b\xde\x5f\x8f\x90\x5c\xee\x58\x12\xc2\x24\xeb\xc2\x9b\x1b\xb4\x8a\x5f\xe8\x62\xb9\x73\xec\xcd\x52\xd5\x5c\x3b\x79\x03\x61\x27\x0d\x1f\xdd\x2d\x99\x19\xb5\x01\x2e\xba\x95\x65\x26\xae\x91\xb5\x2d\x7e\x18\xb2\x94\xca\x7e\xf4\x39\x7f\x33\xc6\x0b\xc2\xe8\xf6\x67\xd1\xd7\x78\x35\xda\xaa\x04\x57\x55\xb2\xef\xdf\xa8\xea\xdf\xdd\xc3\xa8\x31\x97\x86\x75\x22\xea\x95\xd1\xce\x20\x44\xba\xd2\x34\x23\x16\x93\x70\xd3\x63\x61\x5a\x54\xc2\xa0\xec\xa7\xde\x65\xab\x7d\xd9\x68\xb7\x1a\xed\xef\xbc\xb3\x92\x37\x4a\x6c\x33\x28\x5b\x05\xf3\xb9\xea\x47\x81\x1f\xc7\x6c\x6d\xd9\x72\xc4\x09\x0d\x49\x82\xe2\x5d\x13\x4f\x30\x7f\x22\x21\x86\x20\x64\x11\x4e\x32\xe5\x9b\x68\x85\x7e\x67\x14\xad\x45\x33\x64\xab\xb3\xaa\x1b\x43\x20\xa4\x80\xc5\x2a\x32\x12\xbd\x18\x62\xd7\x07\x66\x81\xd5\x9d\xe3\x86\xce\x70\xb8\xc1\xdb\x4a\xaa\x81\xed\x30\x74\x4e\xf8\x0e\x41\x08\x4c\xe1\xa5\x63\x2c\x04\xde\xb7\x9e\x63\x8b\xd7\x05\x88\x86\x86\x37\xd4\xf5\x06\xec\x22\x1a\xe2\xf8\x2e\x89\x19\x8a\x7c\x1e\x2e\xc9\x53\x35\x5a\xec\xb0\x5c\x63\x69\x72\xfb\x11\x84\x8e\xaa\xa6\x4a\x68\x69\xa0\x20\x49\xc5\x21\xae\xe3\x94\x7e\xd0\x71\xa7\x83\x64\xb8\x54\x8a\xab\x5f\xee\x99\x0d\xf1\x44\xd5\xb3\xf5\xf9\x57\x11\xe2\xf0\x12\x7e\x5b\x3f\x12\x23\x21\x49\xa8\xd4\x7a\x40\x31\xa2\x21\xa1\x0b\x07\x29\x4a\x25\x13\x21\x8a\xdd\x14\xa1\xca\x1d\x6b\xa5\xb7\x83\x40\xbc\x71\x0d\x50\xb1\x6f\xce\x79\x9e\x8f\x1c\x44\x3c\x72\xb1\x8b\x5f\x5d\x23\x38\x74\x8d\x10\xb4\x82\x23\x24\x44\xb6\x33\xab\x35\x65\x7d\x33\x64\x1c\x47\x85\xd2\x9c\xce\x19\x08\x1d\x95\xee\xfe\xf6\x5f\x85\x68\x21\xeb\xa4\x07\xdd\xf1\x97\x16\xab\xfb\xc1\xa2\xac\xda\x29\xb4\xea\x01\xc8\xf2\x65\x56\xb8\xbd\xb4\x13\x0c\xe8\x13\xe1\x8c\xda\x61\xc6\x88\x1c\xf4\x6f\xef\xfe\x3a\xeb\x0e\x6f\xa7\x7e\xff\x36\x18\x6f\x47\xbb\x6c\x95\xa8\x8e\x56\x13\x75\xee\xfa\x83\xde\xec\x3a\xb8\x0d\xc6\xfe\xa0\x3d\x9b\xdc\xf8\x83\xc1\x96\x72\xc4\xc9\x13\x89\xf1\x02\x47\xa6\xa2\x28\x1d\x0d\x02\xd0\x5f\xa1\x05\x86\x00\xad\xc5\xc5\x76\x87\x5d\x44\x2c\x7c\xc4\x1c\xb6\xbf\x6b\xb6\x3e\x36\x8b\x03\xe1\x92\x96\xf7\x88\x13\xd5\x4b\x0b\x3b\xa9\x98\x02\xc0\xff\x71\x32\xeb\x05\x57\xfe\xdd\x60\x3a\x1b\x07\xd7\xfd\xe1\xad\x1d\x73\xab\x67\x41\x65\x6c\x4c\x76\xae\x99\x76\x1c\x8c\x86\x93\xfe\x74\x38\xfe\x69\x76\x37\xee\x1f\x9e\xb2\x72\x80\x59\x54\x02\xcd\xe8\x91\x37\x71\xc8\x9b\x76\x45\x60\xe7\xb2\x8b\xf3\x4f\xbb\xee\xb8\xcd\x2b\x59\x2a\x2c\x8a\x03\x70\x44\xcf\x9c\x39\xd4\xbe\x96\xd9\x64\x8c\x1d\x17\xe8\x0e\x7b\xc1\xa8\x3f\x0a\x06\xfd\xdb\xa2\x02\xd4\x93\x4d\x12\x1c\x42\xf0\x47\x69\xb6\xa7\x3c\xa1\xb5\x9a\x97\xa5\xd7\xc9\x12\x09\xbc\x53\xb3\x25\x1c\xcf\x4c\x44\xdd\x01\x4e\x05\x70\x44\xa3\xda\x12\xef\xfc\x6b\xb4\x16\x00\x87\x1c\x2c\xb0\x6c\xc4\x6c\x41\x28\x68\x34\x28\x6b\x10\x1a\xc6\x69\x84\x1b\x78\x85\x48\xfc\x4d\x0d\xe7\xd4\xbf\xfe\xde\x3b\xff\x1a\x87\x4b\x06\xce\xd5\x92\x8c\xd3\x8e\x83\xc9\x70\x70\x1f\xf4\x66\x93\xe1\xdd\xb8\x1b\xcc\xee\x83\xf1\xa4\x3f\xbc\x05\x7f\x80\x25\x46\x11\x68\x84\xe0\xc3\x37\xd5\xf4\xd9\x00\xfd\x1b\xff\x3a\x50\x8e\xf0\xbd\x77\xfe\xc9\x76\x8d\xcf\xf0\xfc\xd3\xd4\xbf\xfe\x6c\xb3\x9d\xbc\x54\xb3\x0b\x0c\x1f\x68\x34\x24\x5a\x00\xef\x7c\x2b\xd6\x03\x4d\x1b\x4d\x26\xe4\xe9\x70\x66\x32\x92\x54\x2c\xad\xc9\x6b\x48\x13\x4e\xa8\x9c\x83\xaf\xfe\xf6\xc9\xa3\x68\x85\x3d\xe8\xad\xf1\x83\xf7\x7f\x1e\x51\x3b\xf8\x8e\x13\x0f\x7a\xff\x2b\xbc\xcf\x7f\xff\xca\xd6\xf2\xff\x81\x26\x10\xcd\x5f\x84\xb5\xab\x50\x7d\x21\x3f\x27\x6a\x53\xd7\xf0\xd4\x14\xfe\xb5\xde\x59\xe3\xec\xaf\x54\x3e\x97\x24\xfc\xdb\x55\xcf\xda\x51\xfe\x5b\x3a\xbf\xa4\x74\x56\x41\x48\x87\xdb\x54\x2e\x19\x27\xbf\xeb\x9a\x69\xca\x1e\xf1\x6e\x23\x7f\xb4\xb4\xda\x02\xa9\x00\x10\x71\x0a\xd1\x5a\xc0\x98\x2d\x04\xb4\x13\x07\xac\x64\x18\x45\xd5\x58\x70\x96\x26\xf0\xc2\x4e\xae\x7b\x01\xff\x33\xe5\xc2\x13\xdb\x12\x2d\xbf\xcb\x31\x92\x78\xc0\x16\xd7\x4a\xc6\x11\x74\x13\xc9\x31\x5a\xb9\x09\x47\xa9\x1c\xb0\x45\xf0\x84\xa9\xdc\x2d\xfc\x5f\x62\xb8\x2a\x7c\xe2\x0d\x84\xb0\x48\xe9\xb5\xa7\x11\x9f\x4f\x84\x44\xbc\x51\xfa\x0f\x1f\x54\x0d\xe8\x22\xb8\xc6\xc7\x12\x64\x3b\xea\x35\x50\xc8\x41\x50\x7b\xe6\xa0\x0b\xf1\x6d\xed\x5c\x57\x02\x9d\x04\x50\xb6\x47\x7b\x6c\x4d\x55\xdb\x75\xc7\xe3\x2b\xc6\x07\x68\x53\x73\xda\x9c\x93\xe7\xbd\xa0\xae\x4c\xf7\x53\x75\x97\x38\x7c\xd4\xb3\x95\xef\xde\x9d\x3c\xa3\xf4\xc0\xa4\x7d\x4a\x24\x51\x6e\xab\xa6\x34\xfd\xab\x93\xd6\x0c\x6b\xca\x11\xe2\xf5\xc6\x55\x74\xaa\x4e\x8f\xb1\x3d\xa7\x6e\x38\x4a\xa7\xa4\x39\xc6\x7e\x92\xc4\xc4\xdc\xf5\x74\xe3\x54\xc8\xba\xe6\x23\xe8\xaa\x0e\xc4\x8c\x3a\xbf\x6c\x31\xc3\xa7\x34\x5c\x25\xd1\x79\xa2\xaa\x17\x9d\x8d\x1a\xd1\x3d\x9c\x60\x1a\x89\x61\xe9\x43\x9e\x01\x43\x51\x47\x77\xd7\x98\x0f\x88\x90\x98\x66\xb6\xae\xb9\xf0\x33\x53\x1d\xdb\x24\x59\x90\x80\xdd\x63\xf1\x2a\x76\x19\xdd\x14\x89\xc7\x1e\x9e\x13\x65\xdb\xb2\x9b\x3a\xb9\x19\x95\x88\xd0\x2d\xbf\xf9\xa2\xc2\xe0\x70\xe5\x8f\xaf\x8b\x63\x58\x63\x41\x95\xe0\x1c\x07\xc2\x37\xe8\x37\xb2\x4a\x57\x23\xcc\x43\x95\x05\xc1\x65\xab\x68\xa6\x6e\x08\x55\x63\x3f\x60\x14\xcb\xe5\x66\x4b\xf2\xae\xb5\x9d\x5c\x10\x8e\xa3\xae\xda\x94\xc5\x09\x74\x19\x5d\x2b\xff\x4f\x11\x5f\x60\xa9\x83\xb2\x75\x8f\x57\x59\x69\x79\x86\x12\x53\x89\x61\x0b\x80\x69\xbb\xd6\xf8\xa1\x6e\x70\xc4\xb8\x84\xe0\x43\xae\x6e\x76\xcb\xea\x00\xc2\x5f\x8b\xa7\x24\x74\x1e\x9b\xfb\x42\x90\x05\xcd\x3f\x62\x81\x20\xb8\xf5\x3b\x83\xa0\x57\xa2\x98\xe0\x30\xe5\x44\x6e\xb4\xae\x95\x6b\x84\x7d\x77\x65\x8d\x3d\x2e\x6e\xcd\x5a\xc3\xa9\xdf\xf7\xcb\x31\xc0\xdc\x3e\x57\x14\x38\x7c\xf1\x7e\x98\xb2\xe3\x08\x04\x39\xe0\x8e\xfd\x68\xbb\xb7\x2b\x22\x5c\xa1\x15\x89\x37\x47\xed\xb2\x24\x85\xc0\x6b\xb7\x2e\xdf\x6e\xbf\x2f\xc2\x2b\x7d\xd3\xe2\x5d\xb6\xde\x7e\xf0\x6c\x7b\x9b\x13\x05\xa4\xcd\x9b\x97\xee\xf8\xd7\x94\x70\x2c\x54\xe0\x43\x92\x6c\x6f\x27\x4a\xce\x6a\x6f\xa3\xed\xd5\xf4\xc9\x97\xd0\x75\x30\xed\xe9\xae\xb7\x34\x05\x5e\x35\xd7\xd3\xb6\xbf\x67\xe7\x23\xde\x52\xca\x24\x82\x97\xcd\xb7\x76\x79\xcc\xe5\x0d\x4a\x12\x42\x17\x15\x97\x70\x6d\x14\xa0\x77\xf1\x62\xcf\x15\xd2\x80\x2d\x7a\x9c\x3c\x61\xae\x81\x55\x45\x92\x35\x3c\x4c\x6a\xae\xd2\x40\x4e\xda\xe0\x3a\xad\xd7\xdd\x38\x3b\x0f\x58\xca\xec\xa6\x74\xac\xe7\xde\x07\xfb\x60\x57\xcd\x62\x4a\xa1\x2b\xc0\x46\xc2\xf1\x9c\xfc\x96\xe3\x7b\xc8\x84\xaf\xd4\x33\xba\xc4\xb9\xdb\xa0\x1b\x44\xd1\x02\x47\xa6\x13\xf2\xb9\xed\x31\x79\x59\x45\xd0\x0a\xea\x3f\x12\x4d\x76\x21\x4c\x7c\x69\x70\x16\xe3\x0b\x5f\x77\x79\x41\x77\xa2\xb6\xaa\xe5\xec\x66\xd2\x67\x75\xaa\xad\x0f\x7f\x42\xa7\x8a\x43\xd1\x90\x48\x3c\x8a\xe7\x74\xaa\x87\xbc\xa5\x6a\x61\xfd\x16\xe6\xbd\x85\xcb\xcc\xf9\xf8\x73\x4c\xad\x24\xb8\x4d\x3d\xc6\x12\x53\x45\xdf\xa7\x3d\xb4\x11\x10\xb4\xdf\xee\xad\x90\xac\xf4\xe1\xfa\x0e\xaa\x4c\xe3\x5a\xd2\xa9\xeb\xa9\x93\xef\x5e\x96\x1e\x2e\x7f\x74\xbd\x47\x08\x28\x49\xc9\xfd\x60\x9b\x7c\xcd\x4c\xe0\xeb\x8a\xa4\x6f\x8a\x63\xd1\x92\x46\x7d\xba\xe0\x58\x58\xfb\xa5\x4b\x22\xae\x12\x7c\xf5\x4b\x46\xad\x0e\x67\x2b\x13\x2d\x3d\xeb\xfd\x94\x65\x6f\xdf\xbf\x7b\xf7\xe6\x5d\x79\xa4\x9f\x8c\x38\x93\x2c\x64\x31\x04\x32\xcc\x53\xf8\x71\x1f\xf8\xd5\x15\x44\x35\x46\x34\x77\x46\x05\x11\xa1\x8b\xfb\x4b\xe5\xa5\x05\xd7\x4b\x4f\xff\x5d\xc5\x8d\xbb\xb0\x69\xd4\x6a\xef\x2e\x67\x76\x4b\x99\x4a\x19\x73\x5c\x09\x73\x6c\xf9\xe2\x54\xea\xd5\x37\x89\x53\xf2\x17\xda\x1e\xe5\xf9\xff\x83\xf6\x45\xa9\x51\x38\x7e\x8b\x94\x98\x8e\xea\x16\x5f\xb8\x8b\x8c\x38\xa3\x18\xc9\x97\xbc\x53\x7c\x15\xa8\xfc\x30\x9d\x8e\x4e\x82\xa5\x10\x61\x9a\x2c\x29\x39\x79\x48\x25\xae\x7e\xfa\x1c\x61\x6e\xce\x4a\x74\x14\x9d\x45\x38\x46\x9b\xa6\x24\x2b\xcc\x52\x39\x13\x38\x64\xd4\xba\xe2\xce\xfe\x9f\x83\x6e\xfc\xf6\x35\xd1\x27\xc4\xa6\x8c\xc3\x9d\x41\x8b\xd9\xad\x7a\xdb\xd9\x28\x9e\x80\x66\x0f\xcf\x51\x1a\xcb\xca\x07\x5f\x5f\xb4\x45\x35\x28\xcc\x19\x5f\x23\x1e\x9d\x9d\x99\xef\xd6\xb4\xb0\xdd\x8b\x6b\xeb\x66\xb0\x2e\x9c\xee\xfd\x8e\xb2\x01\xba\x31\xa3\xf8\x8e\xc7\x13\xb1\x3c\x03\x20\xa0\x51\xc2\x48\x5e\x62\x9d\x30\x77\x0d\x98\x6a\xb8\x77\x3b\xd1\x1e\xfc\x8f\x00\x00\x00\xff\xff\xc8\xcb\xa0\x7a\x3a\x35\x00\x00")

func assetsPlatformYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPlatformYaml,
		"assets/platform.yaml",
	)
}

func assetsPlatformYaml() (*asset, error) {
	bytes, err := assetsPlatformYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/platform.yaml", size: 13626, mode: os.FileMode(420), modTime: time.Unix(1518864998, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/platform.yaml": assetsPlatformYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"platform.yaml": &bintree{assetsPlatformYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

