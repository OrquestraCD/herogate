// Code generated by go-bindata.
// sources:
// assets/platform.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsPlatformYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xdb\x6e\x22\x39\xf6\x3d\x5f\xe1\x45\xf3\xb0\x3b\x12\x04\x92\xee\x9e\x6e\xbf\x55\x80\xce\x20\x91\x04\x41\xd2\xb3\x9a\x97\x96\xe3\x3a\x54\xbc\xa9\xb2\x6b\x6c\x57\x68\x76\xd4\xff\xbe\xb2\x5d\x57\xaa\x4c\x80\xee\x99\xd1\xae\x96\x48\x11\xd4\xb9\xf8\xdc\x2f\x86\xe0\x97\xd5\x3d\x24\x69\x4c\x34\x7c\x14\x32\x21\xfa\x13\x48\xc5\x04\xc7\xa8\x77\x31\x1c\x0d\xfb\xc3\x0f\xfd\xe1\x87\xde\xd9\x04\x14\x95\x2c\xd5\x16\xf2\x33\x48\x11\x11\x0d\xc8\x90\xad\x85\x4c\x90\xce\x59\xa0\x97\xd1\x60\x78\xb6\x20\x92\x24\xa0\x41\x2a\x7c\x86\xd0\x55\xc6\xe2\x70\x95\x02\x35\x1f\x10\xba\xdf\xa6\x80\xd1\x4a\x4b\xc6\xa3\xb3\xb3\x25\x28\x91\x49\x0a\x16\xb3\xe0\xbb\x60\x29\xc4\x8c\x43\x9d\xa0\x17\xfc\xb2\xc2\x78\x2c\xc2\x0a\x8a\x8b\x77\x3d\x8b\xb7\x90\x22\x05\xa9\x99\xe3\x65\x5e\xb7\x24\x01\x8c\xfe\xb6\x84\x35\xb2\xd4\x2b\x4d\xe8\xb3\x79\x98\xc3\x03\xa9\xd9\x9a\x50\xbd\xd2\x42\x42\x41\x54\x4a\x78\x59\x3e\x98\x0b\x4a\x9c\xe6\x96\xd7\xae\x98\x0d\x36\x39\xd1\x12\x94\x26\x52\x4f\xbf\x00\xcd\x0c\xe9\x1d\x7f\x48\x43\xa2\x01\xa3\x35\x89\x55\x89\x25\x62\x08\xa4\xe1\x7b\x0d\x3a\xd0\xba\xc5\xda\x20\x0c\x02\xc9\x73\xfc\x95\x26\x51\xa5\x1e\x42\xfd\x5c\xc5\x25\xa4\x42\x31\x2d\xe4\xb6\x04\x21\x14\x50\x73\x70\x0d\xbb\x4e\x31\x7e\x22\x3c\x82\x95\xb5\x7d\x03\xa1\xa0\x33\x46\x98\x85\x78\x07\x86\xd0\x98\x68\x88\x84\xdc\x62\xd4\x49\x8c\xd0\xdd\x86\x83\xc4\xc6\xe0\x2d\xd0\x42\x8a\x17\x16\x1a\xa8\xf1\xe3\x58\x24\x09\xd3\x2d\xa4\x32\xfe\x46\x3b\xa0\xb1\xe0\x6b\x16\x65\xd2\xb9\xa2\x45\x57\xd9\x20\x77\xfb\x8e\x49\x2b\xf8\xa0\x16\x02\xd5\xeb\x4a\x12\x4e\x9f\x1c\x6d\x42\x94\x06\xd9\x96\x5f\xc4\xf1\x47\x21\x9d\xe2\xce\x82\xaa\xe9\xd0\xd2\x08\x99\x4e\x33\x5d\x04\x86\x6a\x4b\x5b\xf8\xa1\x90\x6e\xc7\x98\x05\xd8\xe6\x4e\x43\x92\xbd\x5e\xb5\xe8\x27\xba\xb3\x8b\xf6\x08\x6f\x76\x93\x9f\xea\xcc\x85\x14\xff\x02\xaa\x6b\x09\x5c\x18\xaa\x6d\x11\xf3\x9a\xf1\x6f\x32\x77\xae\xeb\xb1\x4e\x6b\xea\x5c\x40\x27\x90\xc6\x62\x7b\xb8\xd3\x1c\xfe\x89\x5e\xeb\x24\x3e\xd0\x6d\xd3\x71\x1b\x7a\xaa\xc3\xc6\x71\x66\x52\xa6\xc3\x61\x41\x9a\xc6\xcc\xd5\xcf\x1c\xa9\x45\xbc\x02\xf9\xc2\x28\x74\xe7\x6d\x8d\x3e\xc7\xeb\xca\xdf\x63\x03\xa0\x70\xdd\xde\x5a\xde\xee\x3f\xab\x4b\x8c\xaf\x32\xfa\x0c\xda\xd7\x73\x1c\x34\x57\x65\x95\x3d\xa2\xde\x53\x7e\x44\xff\x87\xdf\x2d\x8f\x80\x52\x91\x71\x3d\x0b\xbf\x16\x4f\x96\x10\x31\xc1\xcb\x8f\x65\x9b\xfa\xda\xeb\x90\xd0\xb4\x84\xb6\x60\xb3\xe0\x06\x63\x03\xf2\xc9\x65\x60\x75\xa9\xba\xd8\x76\x0b\x60\xc3\x51\xa9\x2c\xb1\x38\x0b\x11\x33\xba\x9d\x08\x9a\x25\xc0\x75\x65\xe8\xc6\xd8\x70\xd1\x1f\x0d\xfb\xa3\x9f\x7a\x25\x74\xa5\x89\x86\x26\x81\xf1\xc9\x74\xbd\x06\xaa\x31\x0a\xe2\x58\x6c\xce\x9a\x51\xca\x38\x65\x29\x89\x77\x5d\x99\xc7\x00\x46\x54\x84\x90\xe6\xc2\x0f\x48\x42\xfe\x2d\x38\xd9\xa8\x01\x15\x49\x83\xc2\x25\x12\x46\x4a\x2b\x5c\x69\x91\xa3\x58\x65\x58\xb3\xa3\x3a\x05\xf7\x99\xca\x61\xf8\x8d\x55\x72\xee\x30\xd3\xeb\xa6\xf2\x9a\xeb\x35\x93\x21\x37\x76\xd8\xca\x86\x51\xef\xc7\x5e\x0b\x9a\xdb\xa2\xf5\xdc\xf0\x35\xe6\xa4\xb6\x23\xe3\x31\xe1\x14\xe2\x87\x34\x16\x24\x0c\x24\x7d\x62\x2f\xed\x6e\xb9\x43\x72\x0d\xda\xf5\xcf\x03\x10\x3d\x7d\xbf\x8d\xd8\x90\xc0\x98\x24\x53\xaf\x51\x1d\x26\xf4\xa3\x49\x7e\x7c\x45\x34\x7d\x32\x82\x9b\x4f\x7e\xce\x0e\x79\x65\xa6\xb9\xee\x1e\x67\x10\x81\x5e\xe0\x1f\xbb\x21\x31\x51\x9a\x51\x23\xd6\x23\x89\x09\xa7\x8c\x47\x1e\x54\x92\x69\xa1\x28\x89\xfd\x18\x34\x16\x59\xb8\x31\x72\x7b\x10\xd4\xa5\x0f\xc0\xd5\x3e\x9e\x6b\x3b\xfa\x9b\xe0\xe8\x46\x92\xa1\x8f\x5c\xfd\xe6\x83\x00\xf5\x41\x18\x49\xf0\x82\x28\x95\x67\x62\x7b\x42\xeb\x1e\xfc\x5d\xe0\x98\x72\x59\xe0\x79\x8b\xdd\xee\x2c\xd8\xb9\x02\xec\x8c\x14\xdd\x87\x5a\x20\xc6\xf9\x40\x72\xea\xa6\x31\xe5\x2f\x4c\x0a\xde\x4c\x69\x77\xd4\x7c\x76\xfb\xf0\xcf\xcf\xe3\xbb\xdb\xfb\x60\x76\x3b\x5d\x96\xd0\xb1\x48\xd2\x4c\x83\x43\xba\x7a\x98\xcd\x27\x9f\xaf\xa7\xb7\xd3\x65\x30\x1f\x7d\x5e\xdd\x04\xf3\x79\x89\xb9\x90\xec\x85\xc5\x10\x41\x78\x23\x42\xc0\x48\xcb\xac\x8a\xfd\x59\x42\x22\xc0\x88\x6c\xd4\x79\x19\xcd\xe7\xa1\xa0\xcf\x20\xf1\xe8\xa7\xc1\xf0\xc3\x60\x58\x2c\x17\xae\xb2\xda\xfe\xd2\xea\xc2\xb9\x8d\x76\xf7\x11\x57\x6c\x76\x34\x1a\xdf\x4d\xa6\x8b\xd9\x62\x3a\x9f\xdd\x4e\x4b\x50\xb5\x05\x3a\x33\x95\x9f\x77\x76\x31\xf5\x0a\xb7\x0e\x81\xbe\x63\x37\xac\x71\xfd\xaf\x6b\x86\xd6\xb5\xff\xef\x84\xf9\xab\xec\x84\x9d\x15\xc8\xa9\x43\x24\xc7\x64\xa3\x70\x2c\x22\x85\x9b\xb3\x18\x6e\x0d\x6b\x06\xab\x1f\x49\x91\xa5\xf8\xbc\x99\x4d\x7b\xd5\xff\xb3\xce\xc4\x47\xf6\x7b\x7b\xfe\x58\x02\xd1\x30\x17\xd1\xb5\x39\xe3\x00\xbc\x95\x96\x40\x12\x3f\xe2\x22\xd3\x73\x11\x4d\x5f\x80\xeb\xdd\x8e\xfa\x3d\x1d\xa6\x2e\x31\xc6\x3f\xfc\xbe\x77\x78\xff\x7a\xa4\x41\xd4\xa5\x91\xfe\xee\xd1\x94\x79\x1f\xc2\x35\x1c\x8a\x90\x47\xf6\x1f\x69\x03\x95\xbc\x1e\x3f\x69\x71\x13\x77\x5e\xf6\xb2\xf3\x63\xed\xa2\x12\xa3\x56\x75\xa7\x57\x2b\xc2\xed\xdd\xae\x5d\x8b\xa7\x63\xd3\x49\x1d\xd4\x57\x8e\xdb\xdb\xa3\xb7\x59\xb7\xd7\x41\xcf\x91\x39\xd4\x1d\x39\x81\x14\x78\xa8\xee\x6a\x97\x97\x73\x41\xc2\x2b\x3b\x91\x81\x9c\x33\xa5\x81\xe7\x9b\x69\x5b\xbc\xe6\x7e\xea\x6d\xf2\x85\x09\x0e\xdc\x7f\xef\x89\x7a\x9e\xc0\x9a\x71\xd6\x71\xb7\x58\xa7\x12\x5c\x13\xc6\x4b\xba\x39\xc9\x38\x7d\x72\xfa\x7e\x0c\x96\xd7\xc1\x7d\xd1\x65\xdd\x65\x80\xa9\x96\x9e\x6d\xfd\x86\x7c\x61\x49\x96\x2c\x40\x52\x53\x52\xd1\xc5\x70\x58\xc1\x18\x37\xb0\x9f\x81\xc4\xfa\x69\x5b\xa2\xbc\x1d\x96\xcc\x15\x93\x10\x8e\x4d\x68\x55\xd7\x03\x75\x2b\x36\x9a\xc7\x3d\x91\x11\x68\x5b\x57\xdc\x0d\x67\x5d\xbb\x3a\x55\x0d\xb1\x16\x7f\xa5\xd2\xce\xe8\x1b\x78\xec\x02\x2e\x84\xd4\x18\xbd\x2f\x44\xbc\x05\xbd\x11\xf2\xd9\xa3\x7c\xb0\x51\x2f\x29\xf5\xde\x63\x04\x4a\xb1\x88\x2f\xb2\xc7\x98\xd1\x59\x8a\xd1\xf4\x36\xb8\x9a\x4f\x27\x35\x8c\x15\xd0\x4c\x32\xbd\xb5\xb2\xb6\x2e\x73\x5e\xbf\xb7\x68\xd0\x0f\xec\xff\x59\x7d\x9d\x58\x65\x8f\x1c\xb4\xc2\x68\x97\x73\xdd\x74\xb9\x8e\x0e\x37\x38\x18\xf3\xca\x93\xb5\x85\x25\x3d\x49\xd4\x8c\x51\x5f\xfa\x7e\x24\x09\x8b\xb7\x7b\x53\x23\xcd\x30\xea\x8d\x86\x17\x6f\x8a\xe2\x73\x03\x89\xbd\xc0\xea\x5d\x0c\xdf\xbc\xef\x35\x1d\xe8\xc6\x58\x62\xfd\x55\x4e\xf4\xbf\x65\x4c\x82\x32\x53\x31\xd1\xec\x91\xc5\x4c\xef\x8c\x2b\xcd\x5c\x28\x6f\xde\xbd\x77\xec\x5d\x66\xd8\x99\x6f\xcb\xe7\x95\x0d\x3a\x6e\xdf\x9b\xc1\x99\x0f\xdc\xbd\x27\xad\xd3\x10\x5f\x0c\xde\x34\x87\x21\xa9\x6f\x48\x9a\x32\x1e\xb5\x02\xc8\x17\xd5\xc8\xa6\x59\xb4\xe7\x02\x6e\x2e\xa2\x89\x64\x2f\xa6\xf4\x90\x8d\x32\x8d\xb8\x01\xbe\x4b\x3b\x6e\x1f\x51\x81\xda\x97\xb6\x7b\xd4\xbd\xe7\xfa\x89\x07\xdd\x8d\x23\xaf\x57\xab\xf9\xae\x18\x15\x0b\x65\xa7\x88\x7e\x2a\x61\xcd\xbe\x14\xf6\x7b\xcd\x2d\xdf\x71\xca\xf7\x1d\xe1\x1f\x64\x6f\x08\x27\x11\x84\x6e\x96\x0d\x64\x33\x0a\x8a\x8e\x6c\xd6\x5a\xfb\x26\xb5\x68\xe7\xca\xa5\x7d\x5f\x8a\x18\xce\x03\x3b\x97\x4f\xc7\x2b\x93\x52\x8d\xe0\x74\x4c\x4f\xda\x2d\x86\xef\xff\x84\xdd\x02\xa8\xea\x6b\xa2\x9e\xd5\x29\xbb\xc5\x6b\x11\xd2\xf6\xaa\x7d\x8a\x8b\x99\xd4\xe7\xda\x02\x7e\xa8\x7b\x0d\x57\xbf\x7b\x97\xa0\x81\x1b\xfc\x19\x9f\x90\xad\xc2\x68\xf4\x66\xef\xc8\xd1\xa8\xe4\x5d\xa5\xf3\xc2\xcc\x1f\x35\x1c\x9f\x1a\x87\xe8\xd0\x75\xa6\x5f\x15\x0b\x6e\x7c\x5b\xdb\x64\x8c\x6a\x9c\x0b\x1f\x97\x9d\xcd\x51\xa3\xbf\xb7\xb8\xff\xa3\x57\x8e\x42\x35\x29\x66\x3c\x92\xa0\x1a\xb9\x30\x66\xa1\x34\xdd\xb3\x37\x1c\xd8\xbf\xf3\x61\xbd\xfc\x7d\x94\x22\x71\xd5\xad\xd7\x78\x7e\x2f\xf2\xa7\xef\xde\xbe\xbd\x7c\x5b\x87\xcc\xd2\x85\x14\x5a\x50\x11\x63\xa4\x69\x31\x21\x7c\x4a\xe9\x2c\xc4\x9d\xed\xae\xe6\xb7\xfc\x89\xc7\x3f\x9f\x16\x63\xef\x38\xca\x42\x79\x15\x0b\xfa\x6c\x7a\xd6\x87\x8b\xc1\xe8\xdd\x7b\xab\xcb\xe8\x5d\xaf\xcd\x7e\x29\x32\x0d\xf7\xe4\xb1\xab\x42\xd9\x83\x2a\x04\xdf\x79\x47\xa9\x73\x97\xe9\x47\x91\xf1\xd0\xb2\xdd\x77\xa4\xbf\x2a\x16\xf2\xf8\x0e\xad\x30\xaa\xd9\x4f\x33\xee\x32\xaa\x66\x9b\x96\x8f\xaf\x89\x86\x0d\xd9\xfa\xf8\xe6\xe0\xb6\x4e\x39\xc0\xa3\xcd\x8c\x6b\x90\x1c\x74\x8e\xd5\xe1\x83\x1c\x12\x68\x4d\xe8\x53\x55\xfd\xba\x7c\xde\x42\x3d\xcd\x29\x36\x36\x9b\x72\x1d\xad\x75\x3e\xc3\xf9\xea\x87\x85\x9e\x2e\x5d\xf0\x42\x58\x4c\xec\xa0\xb4\xfd\x55\x70\x5b\x61\x20\xae\xef\xae\x7d\x34\xac\xbd\xb7\xe3\xd1\xaf\xf5\x96\xbd\x84\x75\x21\x91\x9b\x08\x7a\xaf\xe4\xc7\xc5\xb0\xea\x97\x69\x31\x49\xdf\x71\xb7\xb0\x94\xf7\x92\xdd\xf3\xe9\x5f\x68\x85\xd1\xf7\xb3\xc2\xe8\xdd\xb7\x99\x21\xd8\x97\xd5\x0e\xa5\x4a\xce\x40\x29\x41\x19\xd9\x37\x99\x3b\x12\x9f\x8d\x9a\x4b\xc4\x91\x75\xa1\xdb\x8d\x7f\x81\xfc\x57\xdf\x26\x7f\x7d\x17\xed\x10\xdc\x7d\x7d\x53\x21\x31\x1e\x7d\xba\x30\xf3\x49\x45\x75\xea\x97\x02\xbe\x7d\xb2\xbd\x4b\xd6\x4f\xdb\xb7\x45\xb6\x37\xc8\xc3\xb6\xc7\x43\x37\x47\xaf\x1c\x7f\xc8\x0c\xe4\x3d\xed\x1b\xa6\x9f\x3a\xcf\xff\xd1\xb1\xc7\x73\xb9\x72\x78\x6c\xd7\x88\x0e\xba\x3d\x3b\x31\xfc\xdd\x31\x4e\x20\x56\xa8\xb8\xb3\xfb\x56\x56\xf8\xf9\xfe\x7e\x71\xb2\x19\x8a\xfb\xbd\x23\xf2\x3b\xa7\xf0\xef\x1f\x15\xf7\xfd\xf7\x5b\x47\x28\x36\x81\x35\xc9\x62\xdd\xfa\xb5\xd0\x37\xdf\xa6\x39\x8d\xd7\x42\x6e\x88\x0c\xcf\xce\xdc\x0f\x9d\x1a\x3f\xb9\xdc\xfd\xee\xf5\x13\x89\xb3\xfd\x3f\xa2\x1b\xc7\x82\xc3\x83\x8c\x57\xea\xa9\xc6\xe7\x61\x39\xdf\xcb\xa0\x2e\xeb\x60\x72\xbb\xb2\xf1\xf0\x9f\x00\x00\x00\xff\xff\x69\x43\x40\xf9\x84\x2a\x00\x00")

func assetsPlatformYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPlatformYaml,
		"assets/platform.yaml",
	)
}

func assetsPlatformYaml() (*asset, error) {
	bytes, err := assetsPlatformYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/platform.yaml", size: 10884, mode: os.FileMode(420), modTime: time.Unix(1518285952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/platform.yaml": assetsPlatformYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"platform.yaml": &bintree{assetsPlatformYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

