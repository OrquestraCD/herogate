// Code generated by go-bindata.
// sources:
// assets/platform.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsPlatformYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xfb\x6e\xe3\x36\xd6\xff\x3f\x4f\xc1\xea\xcb\x87\x5e\x50\x3b\x76\xe6\xd2\x19\x02\x5d\x40\xb1\x95\xd4\x58\x27\x36\x2c\x27\xdd\x6d\x51\x04\x0c\x45\xcb\x6c\x64\x52\x25\xa9\xb8\xee\x34\xef\xbe\xa0\x28\xc9\xba\xd1\x76\x3c\xb3\x1d\x2c\x76\x5d\xa0\x98\xe8\x5c\x78\x6e\x3c\xfc\x1d\x4a\xee\x8f\xfe\x9c\xac\xe2\x08\x29\x72\xc9\xc5\x0a\xa9\x3b\x22\x24\xe5\x0c\x02\xe7\xbc\xd7\xef\x75\x7a\xef\x3b\xbd\xf7\xce\xc9\x90\x48\x2c\x68\xac\x52\xca\x0f\x44\xf0\x10\x29\x02\xa6\x11\x52\x0b\x2e\x56\x20\x57\x01\x9e\xfa\xdd\xde\xc9\xc9\x8c\x48\x9e\x08\x4c\x24\x3c\x01\xe0\xff\xc0\x0d\x51\x6b\x2e\x1e\x4f\x40\x21\x99\x3d\xd1\x64\x00\xe6\x9b\x98\x40\xe0\xb8\x3f\xfa\x10\x7a\x83\x73\x08\xef\xa6\x03\x27\xa5\x4c\x05\x8f\x89\x50\xd4\x28\xd2\xbf\x01\x0d\xc4\x45\xc4\xf1\x23\x04\x4e\xff\xfd\x79\xb7\xff\xf6\x5d\xb7\xd7\xed\x9d\xf5\xdf\x3a\x19\xc7\x1c\x85\x05\x37\x00\x1d\xf0\x77\xb2\x81\xe0\x06\xad\x48\xf1\x0c\x80\x3b\x14\x25\x04\x82\x2f\x66\x64\x01\xd2\x65\x7d\x85\xf0\x63\xc6\x54\xb3\xd1\x4f\x1e\x18\x51\xae\xc5\x54\x43\xb5\x59\x7b\x17\xe3\x51\x90\xad\x53\x53\x9b\x71\xb8\x4f\x88\x46\xe8\x81\x46\x54\x6d\x7e\xe2\x4c\x1b\xe5\x93\x88\x60\x05\x7e\x06\xbd\x6f\xc1\x17\x57\x44\xb9\x3f\x49\xf0\xcb\x1e\xf7\xcf\x7b\xb9\xfb\xd7\x28\x9e\x26\x0f\x11\xc5\xa3\x78\xc2\xc6\x28\x61\x78\x09\x81\x12\x09\x39\x22\x3c\x7e\xf2\x00\x9c\xd3\x0f\xd5\x08\x3d\x03\xe3\x33\x70\x1d\x5b\xb0\x2e\x3e\x43\xb0\xfa\x87\x05\xab\xff\xf6\x33\x45\xeb\xa2\x25\x5a\x33\x9e\x28\x32\x47\x0f\x11\xb1\x04\x6c\xcb\x70\x7c\xd0\x3e\xf5\x7e\x98\x24\xea\x81\x27\x2c\x48\x6d\xdb\x65\xb7\xcd\xe4\xad\x53\x36\xcb\xb7\x1c\x99\xc8\x90\x48\x45\x19\xd2\xdd\xa7\x9c\xd4\x5e\x37\xfd\xef\xac\x48\xe7\x15\x52\x64\x8d\x36\x36\xbd\x19\xb9\xe9\x53\x46\xb0\x78\x33\x62\x8a\x08\x46\x54\xc6\x65\xf3\xeb\x53\x07\x3a\x5b\xce\x55\x0a\xe1\xe5\x8a\x30\x65\xef\x96\x0d\xd6\xe3\xcb\xa5\xe6\xec\x8b\x43\x99\xb5\xcb\x5d\xd5\x61\x58\xb6\x49\x76\xa5\xe4\x98\xa6\xd9\xb5\xd9\x6d\x44\x6c\xc6\x64\x6b\x1e\x57\x5f\xed\x1d\xec\x33\xd8\x7f\x71\x8c\xfd\xe9\xf9\x3a\xa5\x31\x89\x28\x2b\x7b\x93\x3f\x6a\xba\x30\xe0\xc1\x96\x0a\xf3\x7f\xd9\x0c\xd7\xa5\x69\xab\xd7\xb4\x25\x0b\x45\x17\x08\x2b\x5f\x71\x41\xb6\xd5\x6f\x16\xf4\x5f\x15\x0f\xc6\x1c\x23\x03\x1e\x2a\x0e\xe5\xcb\x57\xd4\xe4\x71\x20\x52\x21\xa1\xbc\xdf\x09\x4e\xb4\xe8\x84\xdd\xc6\x01\x52\x04\x82\x05\x8a\x64\xc1\xc5\x23\xe2\x0a\xad\x57\x77\x7f\xa5\x1a\xaa\x35\x43\xd7\x15\x2c\xcf\x84\x42\x21\xa9\xec\x53\xe3\xe2\x8c\xc4\x5c\x52\xc5\xc5\xa6\xb4\x5d\x5d\xac\x17\x2e\x71\x97\x25\x06\x4b\xc4\x42\xe2\xa7\x40\xa7\xc2\x90\xcb\xe9\x20\x8c\x02\x58\xa3\x01\x30\x40\x8a\x84\x5c\x6c\x20\x68\x15\x06\x60\xb2\x66\x44\x40\x1d\xf0\x06\x69\x2a\xf8\x13\x0d\x34\x55\xe7\x71\xc0\x57\x2b\xaa\x1a\x4c\x05\x84\xeb\xd7\x48\x03\xce\x16\x34\x4c\x84\x49\x45\x43\x6e\x1b\x83\x2c\xed\xb5\x90\x6e\xe9\xdd\x5a\x5f\x33\xbf\x0b\x81\x18\x5e\x1a\xd9\x15\x92\x8a\x88\xa6\xfd\x3c\x8a\x2e\xb9\x30\x8e\x9b\x08\xca\x6a\x42\x8b\x20\x24\x2a\x4e\x54\x5e\x18\xb2\x69\x6d\x9e\x87\xdc\xba\x5a\x30\x73\xf2\x45\x42\xa3\xa0\x62\xc9\xce\xac\xa6\xec\x47\xa6\xb3\x4d\xf6\x05\xd9\x6c\x17\x3f\x36\x99\x53\xc1\x7f\x25\x58\x95\x36\x70\x1e\xa8\x66\x44\x40\xda\xf8\x3f\x2a\xdc\x99\xaf\x2f\x4d\x5a\xd5\xe7\x9c\x3a\x24\x71\xc4\x37\x87\x27\xcd\xf0\x1f\x99\xb5\x56\xe1\x03\xd3\xe6\x0d\x9a\xd4\x63\x13\x36\x88\x12\xbd\x65\x5a\x12\xe6\xc6\x71\x44\x4d\xff\xcc\x98\x1a\xc2\x3e\x11\x4f\x14\x93\xf6\x7d\x5b\x92\xcf\xf8\xda\xf7\xef\x25\x8d\x32\x0d\x74\xa5\xbb\x64\xf7\x57\xc9\xd9\x47\x96\x49\x9e\xe0\x9d\x1d\xbf\x79\x4a\xf9\xaf\x20\xbc\x48\xf0\xa3\x7d\x5c\x30\xd4\xcc\xe1\x14\x7b\x2f\xb3\x25\x3a\x19\x08\x77\x31\xe6\x09\x53\xa3\xe0\x39\x7f\x32\x23\x21\xe5\xac\xf8\x73\x8b\xd2\x9d\x16\x0b\xf5\xc1\xd1\x34\x6c\xe4\x5e\x6b\x7c\x6b\x47\xe4\x9a\x56\xb6\xaa\x4d\x6d\xbb\x01\xfa\xe7\x4a\x99\xac\x52\x9e\x29\x8f\x28\xde\x0c\x39\x4e\xb6\xd8\xaf\x52\x5e\x7a\x3e\x3f\xef\xf4\x7b\x9d\xfe\x77\x4e\x41\xf5\x15\x52\xa4\x2a\xa0\x73\xe2\x2d\x16\x04\x2b\x08\xdc\x28\xe2\xeb\x93\x6a\x2d\x53\x86\x69\x8c\xa2\x7a\x2a\xb3\x4a\x81\x00\xf3\x80\xc4\x99\xf1\x5d\xb4\x42\x7f\x70\x86\xd6\xb2\x8b\xf9\xaa\x22\x61\xb6\x1b\x04\x52\x49\xb8\xf5\x22\x63\x49\x9d\xa1\xd5\x73\xd7\x38\xb8\x2b\x54\x86\xc3\x1e\xac\x42\x73\x4b\x98\xf6\x87\xca\x1a\xae\x7d\x21\x03\x06\x9c\xa4\xfd\x0f\x02\xe7\x1b\xa7\x41\xcd\x62\xd1\x78\xae\xf5\xea\x70\xe2\xf4\xdc\x86\x03\xc4\x30\x89\x6e\xe3\x88\xa3\xc0\x15\x78\x49\x9f\x9a\x7b\xb2\x26\x72\x45\x94\x39\x65\x0f\x60\xb4\xa0\x83\x26\x63\xc5\x02\x1d\x92\x44\xee\x93\x3a\xcc\xe8\x07\xbd\xf9\xe1\x05\x52\x78\xa9\x0d\xd7\x7f\xd9\x35\x1b\x66\x5f\x63\xbe\xf6\x93\x50\x33\x12\x7c\x0e\xbf\x69\xa7\x44\x48\x2a\x8a\xb5\x59\x0f\x28\x42\x0c\x53\x16\x5a\x58\x51\xa2\xb8\xc4\x28\xb2\x73\xe0\x88\x27\xc1\x5a\xdb\x6d\x61\x90\xaf\x6c\x04\x26\x77\xe9\x5c\xa4\x77\x6c\xba\x38\xda\x99\x44\x60\x13\x97\xbf\xd9\x28\x04\xdb\x28\x14\xad\xe0\x14\x49\x99\xed\xc4\x26\x8e\x6b\x1f\x0f\x4c\xe1\xe8\x76\x99\xf3\x59\x9b\x5d\x1d\x31\xee\x1c\x6c\x75\xfb\x95\xaa\x6d\x55\x6f\x30\xfb\x54\xcb\xa5\x13\xd1\x16\xe2\xd4\x40\x4f\xbb\xc3\x29\x11\xc2\x0c\x32\x1d\x3b\x0b\x79\xec\x89\x0a\xce\xaa\xed\xc4\x2c\x35\x1e\xdd\xdc\xfe\xe3\x7e\x30\xb9\x99\xbb\xa3\x1b\x6f\x56\x50\x07\x7c\x15\xeb\x59\x2e\x65\xba\xb8\x1d\x8d\x87\xf7\x57\xde\x8d\x37\x73\xc7\xfd\x7b\xff\xda\x1d\x8f\x0b\xce\xa9\xa0\x4f\x34\x22\x21\x09\xae\x79\x40\x2a\x97\x54\x00\x8c\xf4\x71\x0d\x01\x5a\xcb\xb3\x62\x27\x9d\x05\x1c\x3f\x12\x01\xfb\xdf\x75\x7b\xef\xbb\xbd\x82\xb7\x64\xe5\x1d\x12\x54\x4f\x91\xb2\x7a\x58\x18\x3f\xdd\x1f\xfd\xfb\xa1\x77\xe9\xde\x8e\xe7\xf7\x33\xef\x6a\x34\xb9\xa9\xf6\xd6\xfa\x4d\x86\x39\x5b\x5b\x14\xcd\xbc\xe9\xc4\x1f\xcd\x27\xb3\x7f\xde\xdf\xce\x46\xad\x4a\xca\x57\x67\xdb\x53\xbb\x1b\x3c\x8a\x2e\xc1\xa2\x5b\x3d\xbd\xab\x67\xd0\xd9\xe9\x87\x7a\x79\x15\xe7\x43\x76\x84\xa5\x07\x79\x03\x14\x65\x05\x51\x1f\x0f\x4d\x57\xaf\xa5\x6f\x30\x19\x7a\xd3\xd1\xd4\x1b\x8f\x6e\xbc\x82\x94\x2a\xf0\x63\x82\x21\xf8\xb3\xe4\xd5\x53\x7e\xe8\xf4\xba\xe7\xa5\xc7\xf1\x12\x49\x52\xc3\x4b\xb1\x20\xf7\xa6\xeb\xd5\x76\xaf\x6e\xb2\x88\x05\xad\xf0\xea\xf4\x2b\xb4\x96\x80\x60\x01\x42\xa2\x3a\x11\x0f\x29\x03\x9d\x0e\xe3\x1d\xca\x70\x94\x04\xa4\x43\x56\x88\x46\x5f\xb7\x48\xce\xdd\xab\xef\x9d\xd3\xaf\x08\x5e\x72\x70\xaa\x5d\x32\x05\x37\xf3\xfc\xc9\xf8\xce\x1b\xde\xfb\x93\xdb\xd9\xc0\xbb\xbf\xf3\x66\xfe\x68\x72\x03\xfe\x04\x4b\x82\x02\xd0\xc1\xe0\xdd\xd7\xcd\x23\xae\x03\x46\xd7\xee\x95\xa7\x53\xfa\xbd\x73\xfa\xa1\x9a\xe4\x67\x78\xfa\x61\xee\x5e\x3d\x57\xc5\x5e\xec\xaa\xa9\x60\x23\x07\x3a\x1d\x85\x42\xe0\x9c\x16\xcb\x3a\xa0\x5b\x8d\x26\x97\xea\xe5\xe1\xcc\xd6\x88\x13\xb9\xac\x28\x6f\x61\x8d\x05\x65\x6a\x01\xbe\xfc\xf9\x83\xc3\xd0\x8a\x38\xd0\x59\x93\x07\xe7\x5b\x27\x05\xcb\xb7\x82\x3a\xd0\xf9\x7f\xe9\x3c\xff\xf2\x65\xd5\xca\xbf\x59\xd0\x34\x6a\x07\xd1\x0b\xaa\x37\x64\x8b\x4c\x0b\xe8\x6e\xad\xce\x96\x02\xff\x84\x30\xb6\xa4\xf5\x3f\x0e\xc5\xa6\xc5\xf1\x3f\x08\x9b\xfd\x0e\x82\xb0\xba\xd1\x68\x88\xe8\x26\x6a\xc9\x05\xfd\x23\xc5\x2e\x73\xfe\x48\xea\x73\xe1\xc1\xab\xb5\x02\x15\x13\x3c\x24\x18\x44\x6b\x09\x23\x1e\x4a\x58\x6d\xfa\xb0\x71\x3a\x68\xae\x4e\x28\x78\x12\xc3\xb3\xea\xc1\xb7\x33\xd8\x7f\xd5\x9a\xf0\x85\x63\x41\xba\xfe\x40\x10\xa4\xc8\x98\x87\x57\x7a\x8d\x03\xf8\x7c\x25\x08\x5a\xd9\x19\xa7\x89\x1a\xf3\xd0\x7b\x22\x4c\xd5\x81\xf7\xe1\xe5\x51\x0d\x94\x7c\x05\x21\xdc\x1e\xba\xad\xf3\xfc\xf3\x0b\x9d\x97\xaf\xb4\xa5\x93\x07\x8d\xbe\x6c\x0c\x57\xe4\x50\x86\x6c\xcf\x7c\x9c\xbf\xb9\xbb\xba\xfe\xf7\x96\x85\x28\x70\x69\x1b\x1c\x79\x51\x28\xb2\xfd\x36\xe4\x6b\xa6\x47\x99\x5b\x11\x5d\x72\x31\x46\x9b\x96\x3b\x9f\x9c\x3d\x9f\xaf\x52\x14\xb8\x9b\x6b\xb0\x24\xf8\x31\xd5\x56\x7e\x97\x6a\x95\x99\x26\x7b\x94\x8e\x18\x55\x54\x97\xa2\x56\x69\x66\x42\x2b\xaf\x21\xa7\x9c\x53\x24\xda\xd3\xa8\xf9\x34\x26\x8e\x48\x55\x67\x0a\xea\x4b\xb7\x82\xf6\x9b\xb1\xb6\xd9\x42\xa3\x7c\x43\xb5\x7e\x56\xd0\xb8\x7b\xb3\x0e\x31\xcd\xcb\x34\xcb\x92\x19\xd5\x2c\x39\x24\x31\x61\x81\x9c\x94\xbe\x9e\x18\x73\x14\x5c\xa4\x93\x2a\x11\x63\x2a\x15\x61\x59\x8e\x5b\x5e\x1f\x55\x6e\xf7\xac\x03\x48\x1e\x82\x03\x6f\x0f\xe7\x48\x3e\x0e\xc9\x82\xea\x1c\x36\xde\xcc\x94\xa5\x38\x53\x88\xb2\x42\xce\xbc\x27\x37\xfe\x5e\xba\xb3\x2b\x77\x9e\x83\x62\x93\x21\x7d\x18\x59\xee\x3a\xaf\xd1\xef\x74\x95\xac\xa6\x44\x60\x7d\x62\x81\xf3\xde\x76\x30\xb9\xa6\x4c\xd3\x7e\x20\x28\x52\xcb\x4d\xc1\xf2\xa6\x57\x28\x97\x54\x90\x60\xa0\x37\xdd\xf6\x72\xb5\x1c\xc5\xca\xd9\x3c\x47\x22\x24\x2a\x6d\xa4\xe6\xfd\x50\xd9\xbb\xb2\x54\x89\xb1\x54\x93\x85\xd3\x26\xe8\x6b\xf2\xd0\x46\x9c\x72\xa1\x20\x78\x97\x9b\x98\xbd\x9f\xb3\x38\xef\xae\xe5\x53\x8c\xad\xb7\xc0\xae\x94\x34\x64\xf9\xe7\x08\x10\x78\x37\xee\xc5\xd8\x1b\x96\x38\x7c\x82\x13\x41\xd5\x26\xb5\xb5\x71\x15\xbe\xff\xd6\xb7\x22\xdf\x4d\xff\x3f\x2a\xef\x57\xf3\x1e\x52\x42\x50\xd7\xbc\xf7\x9d\xeb\x7e\xce\x0b\xcb\xae\xcd\x23\x69\xd9\x44\xd5\x1a\xb5\x6d\xdf\x4b\xb4\xa2\xd1\x66\xe7\xd6\x88\x13\x08\x9c\x7e\xef\xfc\x75\xf1\xe9\x07\x59\xa5\xd7\xff\xce\x79\xef\xf5\x3b\xa7\x9a\x40\x33\x62\xa3\x34\x5f\xc5\xd5\xc3\x6f\x09\x15\x44\xea\xee\x84\x14\x4d\x1b\x67\x0d\x0d\x56\xf7\x42\xf1\xde\xd2\xfa\x86\xb2\x2d\x0c\xb5\x71\xb4\x78\xbe\x8d\x41\xcb\xbb\xcb\x6a\x71\x66\x97\x01\xce\x52\xa9\x38\x80\xe7\xdd\xd7\x55\xac\x29\xd4\x35\x8a\x63\xca\xc2\x46\x01\xd9\xaa\x1a\xa4\xdb\x2c\xdc\xf1\xfa\x62\xcc\xc3\xa1\xa0\x4f\xba\xf5\xa0\xb5\xd4\xc8\xa3\x42\x9e\xc4\x2d\xef\x6e\x40\xce\xda\x11\xe9\xb9\xba\xf3\x2e\xa1\xcc\x6e\xf0\xd7\xfe\x6e\x35\xae\x9b\xb1\x55\x21\x53\xd8\xd4\x89\x05\x59\xd0\xdf\xf3\xf8\xed\x4b\xcb\x27\x1c\xa2\x6c\x4b\xd8\xe7\x84\x6b\xc4\x50\x48\x02\x33\x2a\xb8\xa2\x5a\x05\x39\x56\xa1\x68\x05\xd3\x7f\xc4\x29\xdb\x99\x34\xdb\xbe\x23\x78\x44\xce\xdc\x74\xec\xf1\x06\xbe\xde\x52\x95\xe2\x34\x4a\x8f\x1a\xdd\x7a\xef\xfe\x82\xd1\x8d\x60\xd9\x51\x48\x3e\xca\x63\x46\xb7\x7d\x15\xd2\xcc\x6a\xfa\x14\xe6\x20\xdc\x96\xda\x9c\x7e\x68\x7a\xb5\x56\x7b\x7a\x67\x44\x11\xa6\xf9\x47\x6c\x88\x36\x12\x82\xfe\xeb\x9d\x90\xa3\xd2\xc9\x6d\x9f\xa9\x94\x79\x6c\x6e\x1c\xe2\x43\xdb\x9a\x76\x57\x52\x72\xe5\x73\xd1\xaa\x62\x50\xd2\x9c\xe7\xb8\x38\xd9\x8c\x34\xf8\xaa\xa1\xfd\xeb\xed\x9d\x5e\xc9\x8a\x11\x0b\x05\x91\x95\xbd\x30\xa0\x81\xd0\xa7\x67\xf3\xe3\x30\xfd\xbb\x14\x7c\x65\xba\x9b\x53\x79\x3e\xe7\xd9\xd3\xb7\x6f\xde\xbc\x7a\x53\xa6\x8c\xe2\xa9\xe0\x8a\x63\x1e\x41\xa0\x70\x8e\x10\x76\x7f\x47\xd5\x86\x32\x5a\x92\x64\x5e\x58\x6c\x99\x28\x0b\xef\xce\x75\xe5\x6d\xa5\x8e\xbd\x8a\xb6\x21\x85\x26\x4a\x28\xaf\xb6\x0b\x1f\x34\xb1\xc1\x61\xb8\xe0\x50\x4c\x60\xb5\xe3\xdf\x52\xdd\xd6\xd5\x3e\xa2\xae\xcb\x3a\xff\x0b\x0a\xba\x04\x9b\x0f\xaf\xed\x92\xd0\x41\x73\xd1\x91\xe5\x6f\x96\x31\x06\xd1\xb8\xb8\xc0\xab\xa0\x9a\x6d\x14\x7e\x98\xcf\xa7\x47\x87\x21\x9f\xdc\x5e\xb0\xbf\x33\x09\xfb\xc9\xb2\xd5\xbe\x7b\x72\x79\x81\x63\x43\xb2\x40\x49\xa4\x1a\x5f\xd1\x7c\xf4\x9c\x64\x3c\x5e\x70\xb1\x46\x22\x38\x39\x31\x1f\x00\xa5\x0b\xd4\xdf\x32\xe6\x2f\x7b\xec\x1f\x95\x0d\x22\xce\xc8\xad\x88\x7c\xb9\x3c\x01\xc0\x63\x41\xcc\x69\x0e\x24\x2c\xd2\x65\x03\xbb\xc3\x1b\x3f\x2d\x82\x7f\x05\x00\x00\xff\xff\x9a\x7b\x64\x10\xd4\x30\x00\x00")

func assetsPlatformYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPlatformYaml,
		"assets/platform.yaml",
	)
}

func assetsPlatformYaml() (*asset, error) {
	bytes, err := assetsPlatformYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/platform.yaml", size: 12500, mode: os.FileMode(420), modTime: time.Unix(1518544311, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/platform.yaml": assetsPlatformYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"platform.yaml": &bintree{assetsPlatformYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

