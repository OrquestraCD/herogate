// Code generated by go-bindata.
// sources:
// assets/platform.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsPlatformYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xeb\x36\xf2\x7f\xcf\xa7\x20\xfc\xcf\x43\x5b\xc0\xd7\x9c\xab\x80\xfe\x01\xc5\xd6\x49\x8d\x75\x62\xc3\x76\xd2\x6d\x5f\x0c\x46\x9a\xc8\xdc\xc8\xa4\x4a\x52\x71\xdd\xd3\xf3\xdd\x17\x14\x75\x97\xe8\x4b\x72\xd2\xee\xc1\xae\xfb\x72\x22\xce\x90\xc3\xdf\x0c\xe7\x42\x4e\xed\x9f\x17\x4b\xd8\x84\x01\x96\xf0\x89\xf1\x0d\x96\x77\xc0\x05\x61\xd4\x42\xad\x41\xaf\xdf\x6b\xf7\x3e\xb6\x7b\x1f\x5b\x67\x23\x10\x2e\x27\xa1\x8c\x47\x7e\x02\xce\x7c\x2c\x01\xcd\x02\x2c\x1f\x18\xdf\xa0\x74\x0a\xf4\xd4\xef\xf4\xce\xce\xe6\x20\x58\xc4\x5d\x10\xd6\x19\x42\xff\x87\x6e\x40\x6e\x19\x7f\x3c\x43\x19\x67\xf2\x45\x0d\x23\xb4\xdc\x85\x60\xa1\x96\xfd\xf3\xc2\xb2\x9c\xe1\xc0\xb2\xee\x66\xc3\x56\x3c\x32\xe3\x2c\x04\x2e\x89\x9e\x48\xfd\x86\xc4\xe3\x97\x01\x73\x1f\x2d\xd4\xea\x7f\x1c\x74\xfa\xef\x3e\x74\x7a\x9d\x5e\xb7\xff\xae\x95\x50\x2c\xb1\x9f\x51\x23\xd4\x46\xff\x80\x9d\x85\x6e\xf0\x06\xb2\x6f\x08\xdd\xe1\x20\x02\xab\xf0\x01\xa1\x39\x3c\x58\x28\x16\x61\x21\xb1\xfb\x98\x30\x54\xe4\x5d\x44\xf7\x14\xa4\x6d\x10\x5b\x8f\x9a\x24\xbf\x0b\xdd\xb1\x97\xaf\x19\xaf\x57\x99\x3e\x19\xb4\x9f\x30\x09\xf0\x3d\x09\x88\xdc\xfd\xca\x68\x41\xd0\x4f\xd4\xb2\x16\x10\x80\x2b\x8b\xc2\xb7\x51\xaf\xf4\x97\xa2\xba\x02\x69\xff\x2a\x2c\xd4\x6a\x1d\x00\x6e\xd0\x4b\x29\xae\x71\x38\x8b\xee\x03\xe2\x8e\xc3\x29\x9d\xe0\x88\xba\x6b\x0b\x49\x1e\xc1\xc9\xc0\xa2\x12\xb2\xb1\xd0\xd1\xbd\x85\x5a\xe7\x9f\xcb\x00\x7f\x41\x1a\x32\x64\xb7\x4c\x58\x5f\xfe\xc7\x61\xdd\x7f\x1e\xd6\xfd\x77\xaf\x04\xf6\xa9\x58\x5f\x36\x60\x3d\x67\x91\x84\x25\xbe\x0f\xc0\x00\x77\x4e\xf0\x72\xc8\x5f\xf3\x80\x4e\x23\x79\xcf\x22\xea\xc5\xf2\xee\xdb\x8b\x69\x1b\xf9\x46\x0f\xed\x26\xa7\x4c\xc8\x46\x20\x24\xa1\x58\xb9\xc8\xa2\x01\xf4\x3a\xf1\x7f\xdd\x4c\xf5\x57\x58\xc2\x16\xef\x0e\xcd\x9f\x90\xd5\xf7\x98\x0c\x18\x76\x37\xa6\x12\x38\x05\x99\x50\x99\xf6\xf9\x9a\x4a\x48\x96\xb6\xa5\xc4\xee\x7a\x03\x54\x9a\xdd\x7c\x8d\xf4\xe5\xe6\x55\x01\xe0\xd9\x30\x27\xbe\x7e\x9f\x25\x69\x92\xdc\x10\x6c\x21\x98\x4b\x62\x0b\x30\xed\x43\xb3\x1c\x12\x2a\x59\xfb\x65\x36\xd9\xec\x4f\xff\xc6\xfd\x5c\xbe\x64\x3f\x71\x22\x31\x23\x21\x04\x84\x16\x77\x97\x7e\xaa\x6f\x69\xc8\xbc\x7c\xd4\x4a\xff\x65\xda\x88\x32\xe5\x8a\x30\x35\x3b\x57\x3f\x9b\x4b\xf2\x80\x5d\xb9\x90\x8c\x17\x18\xf4\xc2\x8b\x8b\xec\xc3\x84\xb9\x31\x70\xc5\xf3\x53\xda\x62\x2a\x50\x69\xc2\x14\x21\x10\x12\x73\xe9\xfc\x0e\x6e\xa4\x26\x99\xd2\xdb\xd0\xc3\x12\x2c\xf4\x80\x03\x91\x51\xb1\x00\x6c\x4e\xcb\x21\x4b\x05\x23\x59\x09\x59\xd5\x25\x15\x63\x89\xc0\xe6\x34\xd5\xa7\xc4\x3e\x94\x3c\x43\x0c\x0c\x9a\x43\xc8\x04\x91\x8c\xef\x0a\x8c\xb6\xab\x84\x13\x65\x17\x91\x72\x0c\xd7\x98\xfa\xb0\x88\xf3\xc0\x12\x41\xca\xa7\x20\x2b\x1a\x40\xfa\x1b\x62\x09\x3e\xe3\x3b\x0b\x35\x32\x23\x34\xdd\x52\xe0\xb1\x7a\x6a\x43\x33\xce\x9e\x88\xa7\x46\x95\xf6\x87\x6c\xb3\x21\xb2\x46\x94\x65\xb8\xfd\xca\xd0\x90\xd1\x07\xe2\x47\xbc\xa6\x38\xfd\xcb\x31\x28\x1b\x4b\xfe\x6b\x56\x40\x11\x9b\x54\x15\x8d\x78\x16\x09\x2b\xbe\x58\xff\x2e\x39\xa6\xee\x5a\xe3\xbb\xc1\x42\x02\xaf\x90\x4c\x23\x19\x46\x32\x35\x29\x51\x97\x22\xd5\x4e\x2a\x47\x05\xe2\x74\xf8\x32\x22\x81\x57\x9a\x7d\xaf\xae\x63\xf2\x67\x2a\xb9\x89\xf7\x04\x1d\x37\xb3\x3f\x57\xc5\x33\xce\xfe\x05\xae\x34\xe9\xb7\x74\x80\xeb\x18\xa1\x38\xfc\xbc\x48\x01\xc9\xee\x4f\x55\x63\x19\x85\x74\x74\x04\x61\xc0\x76\xc7\xab\x51\xd3\x3f\x53\x8f\x8d\xcc\xc7\x2a\x32\x60\x91\xa7\xcb\x4f\xc2\xe8\x57\xd3\x66\xe6\xbb\x8d\xba\x6c\x74\xf1\xd5\xbd\x5f\x33\x4f\xf9\xb3\xb9\x63\x2f\x9d\xd5\xed\x6c\x64\x2f\x9d\x06\x1c\x42\x5d\x45\xa8\x90\x82\x86\xf6\xcc\xbe\x1c\x4f\xc6\xcb\x5f\x56\x37\xf6\xb5\x33\x5a\x8d\xed\xeb\x1a\x4b\x5a\x33\xcf\xb0\x5c\x57\x34\x69\x59\x61\x52\x59\x77\x76\x78\x13\xd4\x3d\x51\xd5\xf3\xe7\xbf\xe3\x5d\x50\x6a\x1d\x95\x68\x50\x24\xcd\xe3\x42\xfa\x3b\xd5\xbc\x53\xc3\xdc\x1b\xf5\xea\xb1\x7b\x71\x61\x59\x97\x91\xfb\x68\x2e\xf1\xf4\x68\x59\xb9\x79\xf5\xb3\x4e\x96\x6b\x27\x65\x90\xed\xba\x2c\xa2\x72\xec\x7d\x49\xbf\xcc\xc1\x27\x8c\x66\x7f\xe6\x75\x52\xab\x41\x5a\x05\x51\x5d\xc8\xb1\x7d\xad\xaa\x09\x73\x4d\xa4\xc6\x4c\x12\x36\x2d\xd1\x2c\x8c\xfa\xd9\x42\x44\x9b\x98\x66\xc6\x02\xe2\xee\x46\xcc\x8d\xf2\xcc\x1a\x15\xcf\x48\x6b\xd0\xeb\x0f\xda\xfd\x5e\xbb\xff\xbe\x95\x8d\x2e\x24\x96\x50\x66\x50\xba\x72\x1e\x1e\x54\x7d\x8b\xec\x20\x60\xdb\x92\x2e\x67\x9c\x50\x97\x84\x38\xa8\xaa\x78\x01\xfc\x89\xb8\x60\x21\x97\x79\x10\x26\xc2\x77\xf0\x06\xff\xc1\x28\xde\x8a\x8e\xcb\x36\x25\x0e\x7d\x84\x2c\x24\xa4\xb0\xf2\x5d\x24\x24\xf1\x66\x48\x39\xdf\xd0\x1b\xac\x9f\x5a\x33\x74\x9a\xc3\x0c\x5e\xb6\x52\x03\x6c\x87\xa1\x33\xc2\x77\x08\x42\xa4\x13\xb9\xd8\xbf\x5b\xa8\xf5\x43\xcb\xe0\x5e\x9a\xce\x69\x3b\x86\xd7\x8d\xf3\x17\x6b\x88\xa9\x0b\xc1\x6d\x18\x30\xec\xd9\xdc\x5d\x93\xa7\xa6\xf3\x5a\x62\xb9\x02\xa9\x73\x85\x23\x08\x0d\x59\x52\x9d\xb0\x24\x81\x82\x24\x12\x87\xb8\x8e\x13\xfa\x3e\xf6\x79\x97\x58\xba\x6b\x25\xb8\xfa\xcb\x3c\xb3\x26\x5e\xa8\xfc\xb8\x39\xf6\x2b\x42\x70\x07\xd6\x0f\xcd\x23\x01\x16\x92\xb8\x4a\xac\x7b\x1c\x60\xea\x12\xea\x1b\x48\x71\x24\x99\x70\x71\x60\xa6\x70\x55\xdc\xda\x2a\xb9\x0d\x04\xe2\xc2\x34\x40\xc5\xbe\x39\x1f\xd2\x58\x68\x20\xe2\x9e\x89\x5d\xfc\x66\x1a\x01\xd7\x34\x42\xf0\xc6\x9a\x61\x21\x92\x93\x59\xcf\x51\x9b\x8b\x2b\x6d\x38\xca\x95\xa6\x74\x46\x47\x68\xc8\x9c\xf7\x5f\x27\x28\x17\x2d\x64\xd3\xea\xce\x70\xfe\xb5\x97\xd5\x05\x66\x9e\xd3\x55\xb2\xbc\x66\x04\x92\x60\x9d\x64\x8d\x2f\x2d\x2d\x1d\xfa\x44\x38\xa3\x65\x3f\xa3\x97\x9c\x8c\x6f\x6e\xff\xb9\x1a\x4e\x6f\x96\xf6\xf8\xc6\x99\x67\xa3\x43\xb6\x09\x55\x89\x1c\x13\x5d\xde\x8e\x27\xa3\xd5\x95\x73\xe3\xcc\xed\x49\x7f\xb5\xb8\xb6\x27\x93\x8c\x72\xc6\xc9\x13\x09\xc0\x07\x4f\xa7\x33\x85\xbb\x46\x84\xc6\x1b\xec\x83\x85\xf0\x56\x74\xb3\x23\xd6\xf5\x98\xfb\x08\xdc\xea\xbf\xef\xf4\x3e\x76\xf2\x1b\xe6\x82\x94\x77\x98\x13\x55\x9c\x8b\x72\x54\xd1\x19\x80\xfd\xf3\x62\x35\x72\x3e\xd9\xb7\x93\xe5\x6a\xee\x5c\x8d\xa7\x37\x65\xa7\x5b\xbf\x5c\x2a\x62\xa3\xc3\xb3\x61\xda\xaf\x38\xdd\xdc\x99\x4d\x17\xe3\xe5\x74\xfe\xcb\xea\x76\x3e\x3e\x3c\x65\xed\x82\x35\xcf\x2c\x3a\xde\x23\xef\x80\xcb\x3b\xe5\x0c\xa3\x1c\x1b\xbb\xe7\x9f\xab\xe6\x5d\x8a\x53\xd9\x36\x67\xb3\x38\x75\x3c\x65\x93\x55\x7b\x4a\x42\x75\x9e\xbc\xa0\x23\xee\x08\x12\x7b\xdf\x77\x45\xa0\x23\x5a\xc5\x42\x87\xd3\x91\x33\x1b\xcf\x9c\xc9\xf8\x26\x17\x3a\x9e\x6c\x11\x82\x6b\xa1\x3f\x0b\xb3\x3d\xa5\x01\xb7\xd7\x19\x14\x3e\x87\x6b\x2c\xa0\x92\x53\x86\x1c\x56\xda\xe3\x57\xb6\xad\x02\x0c\xa6\x5e\x63\x0a\x7a\xfe\x1d\xde\x0a\x04\x2e\x47\x3e\xc8\x76\xc0\x7c\x42\x51\xbb\x4d\x59\x9b\x50\x37\x88\x3c\x68\xc3\x06\x93\xe0\xfb\x06\xce\xa5\x7d\xf5\x63\xeb\xfc\x3b\x70\xd7\x0c\x9d\xab\x2d\xe9\x33\x35\x77\x16\xd3\xc9\x9d\x33\x5a\x2d\xa6\xb7\xf3\xa1\xb3\xba\x73\xe6\x8b\xf1\xf4\x06\xfd\x89\xd6\x80\x3d\xd4\x76\xd1\x87\xef\xeb\xe1\xbd\x8d\xc6\xd7\xf6\x95\xa3\x0c\xeb\xc7\xd6\xf9\xe7\xb2\xa9\x7d\xb1\xce\x3f\x2f\xed\xab\x2f\x4d\x6c\x5b\x1f\x24\x5a\x4b\x19\x0a\xab\xdb\x15\x17\x15\x0b\xda\x62\x89\xdf\x0f\xde\xb7\x39\x04\xa0\x00\xeb\xa6\xc9\x6e\xc3\x4c\x84\x0a\x89\x83\x00\xa5\x24\xa8\x1b\x09\xde\x0d\x98\x8b\x83\xee\x3d\x29\x27\xf7\x27\xc3\xac\x1d\x84\xe6\x43\xed\xb6\xc4\x3e\x6a\x9d\x67\x5b\x6e\xa1\x4e\x59\x93\x4c\xc8\xd3\x55\x99\xac\x11\x46\x62\x5d\x9a\xbc\x81\x34\xdb\x23\x89\x6f\x80\x71\x80\x7c\xa0\xc0\x55\x15\x20\xd3\xe7\xc9\xf3\xf4\x5c\xa1\x7c\x2e\xf4\xff\xc8\x54\x6d\xe1\xe6\x42\xe7\x81\x28\x9f\xd7\xc8\xd5\x50\x1a\x35\x9e\x8f\x86\xe3\xf6\x4a\x05\x46\x61\x85\x6f\xae\xbe\x88\xcd\xe5\x7f\xc5\xc5\x4b\x8a\x0b\xe5\x06\x63\x87\x1f\xc9\x35\xe3\xe4\x8f\x38\xab\x5c\xb2\x47\xa8\x56\xf6\x47\xaf\xd6\x98\x42\xe6\x00\x62\x4e\x2d\xbc\x15\x56\xc0\x7c\x61\x95\x43\xa1\x55\x8b\x99\x8a\xaa\xed\x73\x16\x85\x56\xb7\x9c\x7d\xec\x05\xfc\xaf\x5c\xd7\x3a\xb1\x70\x8b\xd7\x1f\x72\xc0\x12\x26\xcc\xbf\x52\x6b\x1c\x41\xb7\x90\x1c\xf0\xc6\x4c\x38\x8b\xe4\x84\xf9\xce\x13\x50\x59\x2d\x8d\x5e\xa2\xb8\x3a\x7c\xe2\xc2\xb2\xac\x3c\x49\x69\xbc\xaf\xf9\x72\x22\x24\xe2\x42\xc9\x3f\xbd\x57\x49\xb2\x89\xe0\x0a\x8e\x25\x48\x4e\xd4\x6b\xa0\x90\x82\xa0\xce\xcc\x41\x13\xe2\x59\x75\xd1\x94\xd4\x9d\x04\x50\x72\x46\x47\x6c\x4b\x55\x61\x7a\xcb\x83\x4f\x8c\x4f\xf0\xae\x76\xbb\x9c\x93\xa7\xd5\x72\x9c\xba\xef\xa7\x1a\xae\xc1\x7d\x8c\x67\x2b\x76\x3b\x18\x79\x66\xd1\x81\x49\xc7\x94\x48\xa2\xcc\x56\x4d\xa9\x2b\x7c\x23\xad\x1e\x8e\x29\x67\x98\x37\x2b\x57\xd1\xa9\x42\x26\x80\x7d\x73\x7e\x55\x05\x57\x8a\xec\x83\xba\x16\xca\x1d\xd4\x7d\x43\xbd\x9c\x4e\xbd\x6e\x65\x81\x2b\x90\xe9\x75\xaf\x2e\x34\x0b\x57\xf3\xa9\xe9\xd8\x61\x18\x10\xfd\x68\x38\x0c\x22\x21\x9b\x8a\x4e\x67\xa8\x2a\x4f\x3d\x6a\x6c\x91\xd2\xc3\xa7\x54\xda\x85\xa5\xd3\xf8\xdb\xbc\x74\x32\xaa\x97\x1e\x41\x08\xd4\x13\xd3\x42\x47\xd8\x84\x61\xef\x32\xbe\x56\x01\x3e\x21\x42\xaa\x04\xcc\x20\x66\x32\xd5\xb1\xc5\x71\x09\x12\x54\x7d\x8b\xa9\x63\x97\xd0\x2d\xb1\x78\x1c\xc1\x03\x51\x26\x5b\x3c\x7d\x46\x6e\x46\x25\x26\x34\xe3\xd7\xad\x39\x1a\x87\x4f\xf6\xfc\x2a\xbf\xfb\xd7\x1a\x54\x71\xdb\xf0\x0a\x71\x8d\x7f\x27\x9b\x68\x33\x03\xee\xaa\xe0\x8e\x06\xbd\xbc\x88\xbe\x26\x54\x8d\xfd\x04\x38\x90\xeb\x5d\x46\xf2\xb6\x97\x4d\x2e\x08\x07\x6f\xa8\xec\x2f\x7f\xf6\x28\xa2\x5b\x4a\x6b\x96\x98\xfb\x20\xe3\x58\x53\x7b\x16\x28\xed\xb4\x38\x43\x81\xa9\xc0\x90\x01\xa0\xeb\xd0\x2d\xdc\x37\x0d\xce\x18\x97\x16\xfa\x90\x8a\x9b\x3c\xd7\x1b\x80\xb0\xb7\xe2\x29\x74\x8d\x6f\x35\xb6\x10\xc4\xa7\x69\x37\x94\x85\x9c\x1b\xfb\x72\xe2\x8c\x0a\x14\x0b\x70\x23\x4e\xe4\x2e\x96\xb5\xf6\x76\xb5\xef\xc5\xa3\xbd\xc7\xc4\x4b\xb3\x36\x70\xc6\xdf\xc7\x45\x37\xa4\xdb\x18\x6a\x02\x1c\xee\xe0\x38\x4c\x79\x69\x70\x04\x29\xe0\x86\xf3\x58\x36\x6f\x93\x47\xf8\x84\x37\x24\xd8\x1d\x75\xca\xc2\xc8\x42\xad\x7e\x6f\xf0\x26\x6b\x54\x83\x4d\xfc\xbc\xd7\x1a\xf4\xde\x7c\x68\x95\xf5\xad\x6f\x92\x70\xac\xde\xb4\x22\x81\xdf\x22\xc2\x41\x28\x7f\x8e\x25\xc9\x9e\xc4\x0a\xc6\x5a\x3e\x46\x59\x8f\xc3\xc9\xdd\x0c\x4d\x30\xed\xb9\xb6\xc8\x68\x72\xbc\x1a\xfa\x1c\xca\xf6\x9e\xdc\x8b\xb5\x54\x2d\xee\x59\x83\xce\x9b\x72\xd6\xcf\xe5\x35\x0e\x43\x42\xfd\x9a\x49\x98\x0e\x0a\x8a\x4f\xb1\xbf\xe7\xdd\x72\xc2\xfc\x11\x27\x4f\xc0\x63\x60\x55\xee\x57\x1a\x9e\x86\x0d\xef\xb7\x28\x25\x6d\xf3\x38\x82\x35\xb5\x2e\x18\x6f\xc2\x8a\xec\x3a\x23\x6e\xe6\xde\x07\xfb\xa4\x2a\x66\x3e\xa5\x88\x13\xdb\x76\xc8\xe1\x81\xfc\x9e\xe2\x7b\x48\x85\xaf\x54\x0a\x9b\x96\x33\x57\x77\xd7\x98\x62\x1f\x3c\x5d\xe0\xd9\xbc\x6c\x31\x69\x32\x41\xf0\xc6\x8a\xff\x11\xc6\x64\x5d\xa1\xfd\x4b\x9b\xb3\x00\xba\x76\x5c\xbc\x3a\xc3\x85\x3a\xaa\x25\x63\xd7\x93\x3e\xab\x00\xef\x7d\xf8\x0b\x0a\x70\x70\x45\x5b\x62\xf1\x28\x9e\x53\x80\x1f\xb2\x96\xba\x86\xe3\xaf\x56\x5a\x32\x99\xd4\x9c\x8e\x3f\x47\xd5\x6a\x05\xb3\xaa\xe7\x20\x81\x2a\xfa\x31\x1d\xe1\x9d\xb0\x50\xff\xcd\xde\x0c\xa9\x14\x3e\x4c\x0d\x75\x45\x1a\xd3\x96\x4e\xdd\x4f\xd3\xfa\xe6\x6d\xc5\xc3\xc5\xee\xfd\x3d\x8b\xa0\xc2\x2a\xa9\x1d\x64\xc1\x57\xcf\x84\xbe\xab\xad\x94\xdd\x7c\x96\x24\x1a\x53\x9f\x83\x28\x9d\x97\x21\xf1\xb8\x0a\xf0\xf5\x96\xd8\x58\x1c\xce\x36\xda\x5b\xb6\x4a\xdf\x97\x2c\xf9\xfa\xee\xed\xdb\x8b\xb7\xc5\x91\x71\x38\xe3\x4c\x32\x97\x05\x16\x92\x6e\x1a\xc2\x8f\xeb\x14\x6d\x4a\x88\x1a\x94\xa8\x1f\x0b\x73\x22\x42\xfd\xbb\x81\xb2\xd2\x9c\xeb\xa5\xaf\x3e\xa6\xe4\xc6\x9c\xd8\xb4\x1b\xa5\x37\xa7\x33\xd5\x54\xa6\x96\xc6\x1c\x97\xc2\x1c\x9b\xbe\x18\x85\x7a\xf5\x43\x62\x5c\xf9\x2b\x1d\x8f\xe2\xfc\xff\x45\xe7\xa2\x50\x28\x1c\x7f\x44\x0a\x4c\x47\x55\x8b\x2f\x3c\x45\x7a\x39\x2d\x18\x49\xb7\x5c\x49\xbe\x72\x54\x7e\x5a\x2e\x67\x27\xc1\x92\x2f\xa1\x8b\x2c\x29\x39\xb9\x8f\x24\xd4\x7b\xe8\x3d\xe0\xfa\x0a\x28\xf6\xa2\x2b\x0f\x02\xbc\xeb\x48\xb2\x01\x16\xc9\x95\x00\x97\xd1\x52\x6f\x43\xf2\x3f\xcc\xc4\x85\xdf\xbe\x22\xfa\x04\xdf\x94\x70\x98\x23\x68\x3e\x7b\x29\xdf\x36\x16\x8a\x27\xa0\x39\x82\x07\x1c\x05\xb2\xd6\x65\xf8\x55\x4b\x54\x8d\xc2\x03\xe3\x5b\xcc\x8b\xbd\x65\xc5\x86\xb6\x57\xca\x20\x8b\x4b\x7c\x5b\xaf\x29\xa5\xfb\xa8\xbf\xe7\x49\x25\x05\xef\x5b\x7f\x52\xa9\x7d\xdf\xdf\x71\x54\x6c\x94\x3b\xb5\x4d\x48\x95\x16\xe6\x59\x93\x26\x2b\x53\xbb\x0f\xdf\xc3\xaa\x1f\x62\x4f\x6d\x14\x7a\xbd\xe6\xa9\x33\xdd\xf2\x1c\x5b\x56\xb5\xef\xa8\xd4\xf6\xd0\x94\x14\xed\x6d\xab\x6f\xa3\x61\xc0\x28\xdc\xf2\x60\x21\xd6\x67\x08\x39\xd4\x0b\x19\x49\x4d\xe3\x84\xb9\x1b\x5c\xa2\x1a\x1e\xdd\x2c\xe2\x38\xf4\xef\x00\x00\x00\xff\xff\x21\x46\x4d\xc8\x49\x3b\x00\x00")

func assetsPlatformYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPlatformYaml,
		"assets/platform.yaml",
	)
}

func assetsPlatformYaml() (*asset, error) {
	bytes, err := assetsPlatformYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/platform.yaml", size: 15177, mode: os.FileMode(420), modTime: time.Unix(1518876272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/platform.yaml": assetsPlatformYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"platform.yaml": &bintree{assetsPlatformYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

